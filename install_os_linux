#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
# __base="$(basename ${__file} .sh)"
# __root="$(cd "$(dirname "${__dir}")" && pwd)"

# magic variables for links
#__file="$(readlink -f ${BASH_SOURCE[0]})"
#__dir="$(cd "$(dirname "${__file}")" && pwd)"

# arg1="${1:-}"

# TODO: add parameters
# -g :: force git folder remove and install




# aptget
# $1 = app name to install (passed to apt-get)
# $2 = app name to check if it's installed already
aptget()
{
    local instal_cmd=""
    # local app_install="${1:-}"
    local app_install="${1:?Error: app name not set}"
    local app_run="${2:-${1}}"

    # check if app is installed
    if hash ${app_run} 2>/dev/null; then
        echo "===${app_run} already installed."
        return 0
    fi

    # build instal command
    # add sudo
    if hash sudo 2>/dev/null; then
        instal_cmd="${instal_cmd}sudo "
    fi

    # add apt-get
    if hash apt-get 2>/dev/null; then
        instal_cmd="${instal_cmd}apt-get install -qyf "
    else
        echo "===Error: no apt-get tool?"
        return 1
    fi

    instal_cmd="${instal_cmd}${app_install}"
    echo "===${instal_cmd}==="
    ${instal_cmd}
}

# gitclone
# $1 = git url to clone
# $2 = git folder to clone to
# $3 = script to run after cloning
gitclone()
{
    local giturl="${1:?Error: Git url not set}"
    local gitfolder="${2:?Error: Git folder not set}"
    shift
    shift
    local gitrun=("$@")

    if [[ -d ${gitfolder} ]]; then
        echo "===Git folder already exists! Exit."
        return
    fi
    echo "===git clone ${giturl} ${gitfolder}==="
    git clone "${giturl}" "${gitfolder}" ||
    {
        echo "===Git clone exited with Error: $? ${giturl} ${gitfolder}"
        return 0
    }

    # if [[ $? != 0 ]]; then
    #     echo "===Git clone exited with Error: $? ${giturl} ${gitfolder}"
    #     return 0
    # fi

    cd ${gitfolder}
    for run in "${gitrun[@]}" ; do
        echo "===run ${run}"
        ${run}
    done

}

# echo -n "Instal os apps (y/n)? "
# read cont
# if [[ ${cont} != "y" && ${cont} != "Y" ]]; then
#     echo "Exiting..."
#     exit 1
# fi;


# BREAK_links
./break_links
mkdir -p ~/apps

# Basic
aptget git
aptget vim
gitclone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
aptget python-pip pip
aptget python3-pip pip3

# fasd
gitclone https://github.com/clvv/fasd.git ~/apps/fasd "sudo make install"

# commacd
if [[ ! -f ~/.commacd.bash ]]; then
    curl https://raw.githubusercontent.com/shyiko/commacd/master/commacd.bash -o ~/.commacd.bash
fi

# fzf
if [[ ! -d ~/.fzf ]]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install
fi

# Ranger
# rm -rf ~/apps/ranger ~/.config/ranger
gitclone https://github.com/hut/ranger.git ~/apps/ranger "sudo make install" "ranger --copy-config=all"

# TMUX
aptget tmux

# Emacs
aptget emacs
curl -o ~/.emacs.d/key-chord.el http://www.emacswiki.org/emacs/download/key-chord.el

#Reszta
sudo pip3 install BeautifulSoup4
sudo pip3 install flake8
sudo pip3 install bashate
sudo pip install -U speedtest-cli
sudo pip install -U httpie
aptget dtrx



gitclone git://github.com/VitaliyRodnenko/geeknote.git ~/apps/geeknote "sudo python setup.py install" "geeknote settings --editor vim"
# geeknote login

# install dotfiles
${__dir}/install
echo "${__file} Done."

