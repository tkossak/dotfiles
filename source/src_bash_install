#!/usr/bin/env bash

__my_user=$(echo -n "${USER}")
__logi_errors=()
__logi_info=()
__aptget_check_cmd=""
__aptget_install_cmd=""
__aptget_update_cmd=""

source "${__sdir}/source/src_bash_myos"
source ${__sdir}/source/src_bash_colors

hash cygpath 2>/dev/null \
    && __win_appdata="$(cygpath -au ${APPDATA:-})" || __win_appdata=""

if [[ "${__myos}" == "LINUX" ]] && hash sudo 2>/dev/null; then
    __sudo="sudo"
else
    __sudo=""
fi

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# loguj [OPTIONS] <MSG>
# log format
# [TAG][TYPE][MSG]
# OPTIONS
#   -i  :: info
#   -s  :: info installed (default)
#   -l  :: info linked
#   -c  :: info cloned
#   -d  :: info downloaded
#   -ss :: section start
#   -se :: section end
#   -e  :: err
#   -w  :: warn
#   -p  :: print only (do not add to arrays)
#   -t <TAG> ::
# __logi_errors=()
# __logi_info=()
loguj()
{
    local ltag=" ? "
    local ltype="INFO_INSTALLED"
    local lmsg=""
    local lprefix="==="
    local ltmp=""
    local if_print_only="N"
    local color=""

    while [[ $# > 0 ]]; do
        case $1 in
            -i)
                ltype="INFO"
                shift
                ;;
            -s)
                ltype="INFO_INSTALLED"
                shift
                ;;
            -l)
                ltype="INFO_LINKED"
                shift
                ;;
            -c)
                ltype="INFO_CLONED"
                shift
                ;;
            -d)
                ltype="INFO_DOWNLOADED"
                shift
                ;;
            -ss)
                ltype="SEC_START"
                color="${Yellow}"
                shift
                ;;
            -se)
                ltype="SEC_END"
                color="${Yellow}"
                shift
                ;;
            -e)
                ltype="ERROR"
                color="${Red}"
                shift
                ;;
            -w)
                ltype="WARN"
                color="${Red}"
                shift
                ;;
            -t)
                shift
                ltag="$1"
                shift
                ;;
            -p)
                shift
                if_print_only="Y"
                ;;
            -u)
                shift
                ltype="UPDATED"
                ;;
            *)
                if [[ -z "${lmsg}" ]]; then
                    lmsg="$1"
                    shift
                else
                    echo "===[LOG][ERR ]: Unknown option? ($1)"
                    __logi_info+=("[LOG][ERR ]: Unknown option? ($1)")
                    __logi_errors+=("[LOG][ERR ]: Unknown option? ($1)")
                    return 99
                fi
            ;;
        esac
    done

    if [[ "${ltype}" = "INFO" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]:${Color_Off} ${lmsg}"
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_INSTALLED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: INSTALLED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_LINKED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: LINKED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_CLONED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: CLONED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_DOWNLOADED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: DOWNLOADED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "UPDATED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: UPDATED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "SEC_START" ]]; then
        ltmp="${color}${lprefix}[${ltag}]==================<<< START: ${lmsg} >>>==================${Color_Off}"
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "SEC_END" ]]; then
        ltmp="${color}${lprefix}[${ltag}]==================<<< END: ${lmsg} >>>==================${Color_Off}"
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "WARN" ]]; then
        ltmp="${color}${lprefix}[${ltag}][WARN]:${Color_Off} ${lmsg}"
        printf "${ltmp}\n"
        if [[ "${if_print_only}" = "N" ]]; then
            __logi_info+=("${ltmp}")
            __logi_errors+=("${ltmp}")
        fi
    elif [[ "${ltype}" = "ERROR" ]]; then
        ltmp="${color}${lprefix}[${ltag}][ERRO]:${Color_Off} ${lmsg}"
        printf "${ltmp}\n"
        if [[ "${if_print_only}" = "N" ]]; then
            __logi_info+=("${ltmp}")
            __logi_errors+=("${ltmp}")
        fi
    else
        __logi_info+=("wrong ltype=${ltype}")
        __logi_errors+=("wrong ltype=${ltype}")
        return 99
    fi

    return 0
}


# --------------------------------------------------------------------------------



# APT-GET variables
if hash apt-get 2>/dev/null; then
    __aptget_install_cmd="${__sudo} apt-get install -qyf <<APP>>"
    __aptget_update_cmd="${__sudo} apt-get install --only-upgrade <<APP>>"
    # hash dpkg 2>/dev/null &&
    # __aptget_check_cmd="dpkg -s <<APP>> &> /dev/null"
    # __aptget_check_cmd='dpkg -s <<APP>>'
    __aptget_check_cmd='dpkg -s <<APP>> &>/dev/null'

elif hash pact 2>/dev/null; then
    __aptget_install_cmd="pact install <<APP>>"
    __aptget_update_cmd="pact update <<APP>>"
    __aptget_check_cmd="pact show | grep '^<<APP>>$'"
else
    loguj -w -t "---" "No aptget command"
fi

# __geturl_app
if hash curl 2>/dev/null; then
    __geturl_app="curl -fLo"
elif hash wget 2>/dev/null; then
    __geturl_app="wget -O"
else
    loguj -e -t "---" "curl/wget not present"
fi

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# checksum() <FILE> <OPTIONS>
# return 0 if sum is ok
# OPTIONS:
#   -sha1 <SHA1SUM>  :: check the <FILE> against this sha1sum
# RETURN VALUES
#    1 = wrong SUM!
# <> 1 = other errors
checksum()
{
    local file=""
    local sum_type
    local sum_value
    local ltype="SUM"
    while [[ $# > 0 ]]; do
        case "$1" in
            -sha1) # sum type
                shift
                sum_value="$1"
                sum_type="sha1"
                shift
                ;;
            *) # file name to check
                if [[ -n "${file}" ]]; then
                    loguj -e -t "${ltype}" "Unknown option? ($1)"
                    return 3
                fi

                file="$1"
                shift

                if [[ ! -r "${file}" ]]; then
                    loguj -e -t "${ltype}" "Can't read file: ${file}"
                    return 2
                fi
                ;;
        esac
    done

    # CHECK SUM:
    case "${sum_type}" in
        sha1)
            sha1sum --status -c <(echo "${sum_value}" "${file}") \
                ||
                {
                    loguj -e -t "${ltype}" "WRONG CHECKSUM for: ${file}"
                    return 1
                } \
                &&
                {
                    loguj -p -i -t "${ltype}" "Checksum ok: ${file}"
                    return 0
                }
            ;;
        *)
            loguj -e -t "${ltype}" "Unknown sum type: ${sum_type}"
            return 4
            ;;
    esac

    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# create_link [OPTIONS] <SRC_FILE> <DST_LINK>
# OPTIONS:
#    -w  :: create windows hard link (otherwise it's linux soft link)
#    -c  :: cp instead of creating link
#    -b  :: backup old file/dir (otherwise just remove it)
# $1 = source file
# $2 = destination = link path/link
create_link()
{
    local link_type="LINUX"
    local if_backup="N"
    local src_file=""
    local dst_link=""
    local ltype="LNK"

    while [[ $# > 0 ]]; do
        case $1 in
            -w) link_type="WIN HARD"
                shift
                ;;
            -c) link_type="CP"
                shift
                ;;
            -b) if_backup="Y"
                shift
                ;;
            *) # SRC_FILE + DST_LINK
                if [[ -z "${src_file}" ]]; then
                    src_file="$1"
                elif [[ -z "${dst_link}" ]]; then
                    dst_link="$1"
                else
                    loguj -e -t "${ltype}" "Unknown option? ($1)"
                    return 3
                fi
                shift
                ;;
        esac
    done

    # check if right os:
    if [[ "${link_type}" = "WIN HARD" && "${__myos}" != "CYGWIN" ]]; then
        loguj -i -t "${ltype}" "Not cygwin, not linking: ${src_file} ===TO=== ${dst_link}"
        return 1
    fi
    # check if src exists:
    if [[ ! -e "${src_file}" ]]; then
        loguj -e -t "${ltype}" "Src file ${src_file} does not exists."
        return 1
    fi
    src_file="$(readlink -f ${src_file})"

    # check if parent directory of dst exists:
    if [[ ! -d "$(cd "$(dirname "${dst_link}")" && pwd)" ]]; then
        loguj -e -t "${ltype}" "Parent directory of ${dst_link} does not exists."
        return 1
    fi

    # dst_link="$(readlink -f ${dst_link})"

    # remove dst if it's a link
    if [[ -L "${dst_link}" ]]; then
        rm "${dst_link}"
    fi

    # backup dst
    if [[ -e ${dst_link} && ! -L ${dst_link} ]]; then
        if [[ ${if_backup} = "Y" ]]; then
            local backup_file="${dst_link}.old"
            if [[ -e ${backup_file} ]]; then
                loguj -p -i -t "${ltype}" "NOT doing backup, it already exists (${backup_file})"
                rm -rf "${dst_link}"
            else
                loguj -p -i -t "${ltype}" "Backup ${backup_file}"
                mv "${dst_link}" "${backup_file}"
            fi
        else
            rm -rf "${dst_link}"
        fi
    fi

    # linking:
    if [[ $link_type = "WIN HARD" ]]; then
        # loguj -i -t "${ltype}" "LINKED: Win: $(basename ${dst_link} .sh)"
        loguj -l -t "${ltype}" "Win: $(basename ${dst_link} .sh)"
        if [[ -d ${src_file} ]]; then
            cmd /c mklink /J "$(cygpath -aw ${dst_link})" "$(cygpath -aw ${src_file})"
        else
            cmd /c mklink /H "$(cygpath -aw ${dst_link})" "$(cygpath -aw ${src_file})"
        fi
    elif [[ $link_type = "CP" ]]; then
        # loguj -p -i -t "${ltype}" "COPY ${dst_link} ---to--- ${src_file} ---... "
        loguj -i -t "${ltype}" "CP: $(basename ${dst_link} .sh)"
        cp "${src_file}" "${dst_link}"
    elif [[ $link_type = "LINUX" ]]; then
        # loguj -p -i -t "${ltype}" "Linux ${dst_link} ---to--- ${src_file} ---... "
        loguj -l -t "${ltype}" "Lin: $(basename ${dst_link} .sh)"
        ln -s "${src_file}" "${dst_link}"
    else
        loguj -e -t "${ltype}" "bledny link_type: ${link_type}"
        return 99
    fi ||
        {
            loguj -e -t "${ltype}" "$(basename ${dst_link} .sh)"
            return 99
        }

    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# aptget [OPTIONS] <APP_INSTALL> <APP_RUN>
# OPTIONS:
#   -ol :: only linux
#   -oc :: only cygwin
#   -ow :: only host W
#   -oh :: only host H
#   -u  :: update - only if it's installed
#   -U  :: update or install if it's not installed
# $1 = app name to install (passed to apt-get)
# $2 = app name to check if it's installed already
aptget()
{
    local app_install=""
    local app_run=""
    local app_check=""
    local ltype="APT"
    local not_right=""
    local update="N"
    local if_app_installed="N"

    while (( $# > 0 )); do
        case $1 in
            -ol)
                if [[ ${__myos} != "LINUX" ]]; then
                    not_right="Not right os: LINUX != ${__myos}"
                fi
                shift
                ;;
            -oc)
                if [[ ${__myos} != "CYGWIN" ]]; then
                    not_right="Not right os: CYGWIN != ${__myos}"
                fi
                shift
                ;;
            -ow)
                if [[ ${__myhost} != "W" ]]; then
                    not_right="Not right host: W != ${__myhost}"
                fi
                shift
                ;;
            -oh)
                if [[ ${__myhost} != "H" ]]; then
                    not_right="Not right os: H != ${__myhost}"
                fi
                shift
                ;;
            -U) # update or install
                update="U"
                shift
                ;;
            -u) # update only if already installed
                update="u"
                shift
                ;;
            *)
                if [[ -z "${app_install}" ]]; then
                    app_install="$1"
                    [[ -n "${__aptget_check_cmd}" ]] &&
                        app_check="${__aptget_check_cmd//<<APP>>/${app_install}}"
                    shift
                elif [[ -z "${app_run}" ]]; then
                    app_run="$1"
                    shift
                else
                    loguj -e -t "${ltype}" "Unknown option? ($1)"
                    return 99
                fi
                ;;
        esac
    done

    [[ -z "${app_run}" ]] && app_run="${app_install}"
    if [[ "${__if_update}" == "Y" ]]; then
        loguj -i -t "${ltype}" "Updating later (${app_run}"
        return 0
    fi

    if [[ -n "${not_right}" ]]; then
        loguj -i -t "${ltype}" "${not_right} (${app_run})"
        return 1
    fi

    # check if app is installed
    if hash ${app_run} 2>/dev/null; then
        if_app_installed="Y"
    # elif [[ -n "${app_check}" ]] && ${app_check} &> /dev/null; then
    elif [[ -n "${app_check}" ]] && eval "${app_check}" ; then
        if_app_installed="Y"
    fi


    # What to do
    if [[ "${if_app_installed}" = "Y" && "${update}" = "N" ]]; then
        loguj -i -t "${ltype}" "App installed, not updating: ${app_run}"
        return 0

    elif [[ "${if_app_installed}" = "Y" && "${update}" =~ u ]]; then

        # check if apt-get update exists
        if [[ -z "${__aptget_update_cmd}" ]]; then
            loguj -e -t "${ltype}" "No apt-get update tool (${app_install})"
            return 1
        fi
        local update_cmd="${__aptget_update_cmd//<<APP>>/${app_install}}"
        loguj -p -i -t "${ltype}" "Updating: ${app_run}"
        ${update_cmd} &&
            loguj -u -t "${ltype}" "${app_run}" ||
            {
                loguj -e -t "${ltype}" "Updating: ${app_install}"
                return 1
            }

    elif [[ "${if_app_installed}" == "N" && "${update}" == "u" ]]; then
        loguj -i -t "${ltype}" "App NOT installed (update only option): ${app_run}"
        return 0

    elif [[ "${if_app_installed}" == "N" || "${update}" == "U" ]]; then
        # Installation
        # check if apt-get install exists
        if [[ -z "${__aptget_install_cmd}" ]]; then
            loguj -e -t "${ltype}" "No apt-get install tool (${app_install})"
            return 1
        fi

        local install_cmd="${__aptget_install_cmd//<<APP>>/${app_install}}"

        loguj -p -i -t "${ltype}" "Installing: ${app_run}"
        ${install_cmd} &&
            loguj -s -t "${ltype}" "${app_run}" ||
            {
                loguj -e -t "${ltype}" "Installing: ${app_install}"
                return 1
            }
    else
        loguj -e -t "${ltype}" "It should never get here".
        return 1
   fi
   return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# gitclone <OPTIONS> <GIT_URL> <GIT_FOLDER>
# -u  :: update only if folder exists
# -p  :: --depth <NN>
# $1  = git url to clone
# $2  = git folder to clone to
# $3- = script to run after cloning
gitclone()
{
    local ltype="GIT"
    local giturl=""
    local gitfolder=""
    local runlater=()
    local update=""
    local git_options=""

    while (( $# > 0 )); do
        case $1 in
            -u) # update only if already installed
                update="u"
                shift
                ;;
            -p)
                shift
                git_options="--depth $1"
                shift
                ;;
            *)
                if [[ -z "${giturl}" ]]; then
                    giturl="$1"
                    shift
                elif [[ -z "${gitfolder}" ]]; then
                    gitfolder="$1"
                    shift
                else
                    runlater+=("$1")
                    shift
                fi
                ;;
        esac
    done

    if [[ -z "${gitfolder}" ]]; then
        loguj -e -t "${ltype}" "Lack of gitfolder variable!"
        return 1
    fi

    if [[ -d "${gitfolder}" ]]; then
        if [[ "${update}" == "u" ]]; then
            # update
           cd "${gitfolder}"
           git up ||
               {
                   loguj -e -t "${ltype}" "Updating $(basename ${gitfolder} .sh)"
                   return 1
               }
        else
            loguj -i -t "${ltype}" "Already exists: $(basename ${gitfolder} .sh)"
            return 0
        fi
    else
        # install
        loguj -p -i -t "${ltype}" "Cloning ${giturl} ===TO=== $(basename ${gitfolder} .sh)"
        git clone ${git_options} "${giturl}" "${gitfolder}" ||
            {
                loguj -e -t "${ltype}" "Problem cloning ${giturl} ===TO=== $(basename ${gitfolder} .sh)"
                return 1
            }
    fi

    # run later
    if [[ "${#runlater[@]:-}" > 0 ]]; then
        cd ${gitfolder}
        for run in "${runlater[@]:-}" ; do
            loguj -i -t "${ltype}" "Run: ${run}"
            ${run}
        done ||
            {
                loguj -e -t "${ltype}" "Run: ${run} ===APP:=== ${giturl}"
                return 1
            }
    fi

    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# geturl [OPTIONS] <URL> <FILE> [OPTIONS] [RUN_LATER_CMDS]
# OPTIONS:
#     -u  :: download file even if it exists
#     -d  :: delete the file bofore downloading and after succussful install
#     -sha1 <SUM> :: sha1sum of the file to check. If it fails, file is not installed
geturl()
{
    local ltype="URL"
    local update=""
    local url=""
    local file=""
    local sum_type=""  # for checksum()
    local sum_value="" # for checksum()
    local if_moved_to_tmpfile=0
    local if_del=0
    local runlater=()

    while [[ $# > 0 ]]; do
        case "$1" in
            -u)
                shift
                update="Y"
                ;;
            -d)
                shift
                if_del=1
                ;;
            -sha1)
                shift
                sum_value="${1}"
                sum_type="sha1"
                shift
                ;;
            *)
                if [[ -z "${url}" ]]; then
                    url="${1}"
                    shift
                elif [[ -z "${file}" ]]; then
                    file="${1}"
                    shift
                else
                    runlater+=("$1")
                    shift
                fi
                ;;
        esac
    done

    if [[ ${if_del} = 1 ]]; then
        rm -rf "${file}"
    fi

    tmpfile="$(mktemp)"

    if [[ -z "${__geturl_app}" ]]; then
        loguj -e -t "${ltype}" "No curl/wget app. (${url})"
        return 99
    fi

    if [[ "${update}" = "Y" && -e ${file} ]]; then
        mv "${file}" "${tmpfile}"
        if_moved_to_tmpfile=1
    elif [[ -e ${file} ]]; then
        loguj -i -t "${ltype}" "File already exists: $(basename ${file} .sh)"
        return 0
    fi

    # download:
    loguj -p -i -t "${ltype}" "Downloading ${url}"
    echo "${__geturl_app} ${file} ${url}"
    ${__geturl_app} ${file} ${url} \
        ||
        {
            loguj -e -t "${ltype}" "Downloading: ${url}"
            if [[ ${if_moved_to_tmpfile} = 1 ]]; then
                mv -f ${tmpfile} ${file} \
                    && loguj -p -i -t "${ltype}" "Old file restored: ${tmpfile}" \
                    || loguj -e -t "${ltype}" "Restoring old file: ${tmpfile}"

            fi
            return 1
        }

    # check sum:
    if [[ -n ${sum_type} ]]; then
        checksum ${file} -${sum_type} ${sum_value} ||
            {
                # error displayed by the checksum function
                if [[ ${if_moved_to_tmpfile} = 1 ]]; then
                    mv -f ${tmpfile} ${file} \
                        && loguj -p -i -t "${ltype}" "Old file restored: ${tmpfile}" \
                        || loguj -e -t "${ltype}" "Restoring old file: ${tmpfile}"
                fi
                return 1
            }
    fi
    loguj -d -t "${ltype}" "${file}"

    # remove tmp file
    if [[ ${if_moved_to_tmpfile}=1 && -e ${tmpfile} ]]; then
        rm -rf "${tmpfile}"
    fi

    # run later cmds
    if [[ "${#runlater[@]:-}" > 0 ]]; then
        cd "$(cd "$(dirname "${file}")" && pwd)"
        for run in "${runlater[@]:-}"; do
            loguj -i -t "${ltype}" "Run: ${run}"
            ${run}
        done ||
            {
                loguj -e -t "${ltype}" "Run: ${run} ===APP:=== ${url}"
                return 1
            }
    fi

    # del <FILE> if told so:
    if [[ ${if_del} = 1 ]]; then
        rm -rf "${file}"
    fi

    return 0
}



# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# pipinstall [OPTIONS] <APP_INSTALL>
# OPTIONS:
#   -2  :: pip2
#   -3  :: pip3
#   -u  :: update
#   -H  :: sudo option
# $1 = app name to install
pipinstall()
{
    local ltype="PIP"
    local pip="pip"
    local sudo_options=""
    local update=""
    local appinstall=""
    local cmdinstall=""

    echo "ile=$#"
    echo "opcje=$@"
    set -x
    while getopts ":23uH" opt; do
        case $opt in
            2)
                pip="pip2"
                ;;
            3)
                pip="pip3"
                ;;
            u)
                update="-U"
                ;;
            H)
                [[ -n "${__sudo}" ]] && sudo_options="-H"
                ;;
            \?)
                echo "Invalid option: -${OPTARG}"
                return 1
                ;;
            :)
                echo "Option -${OPTARG} requires an argument."
                return 1
                ;;
        esac
    done

    shift $((OPTIND-1))

    if (( $# == 1 )); then
        appinstall="${1}"
    else
        loguj -e -t "${ltype}" "Unknown option? $@"
        return 3
    fi
    set +x

    if ! hash ${pip} 2>/dev/null; then
        loguj -e -t "${ltype}" "PIP not installed (${pip})"
        return 1
    fi


    if ${pip} -q show ${appinstall}; then # app is installed
        if [[ -z "${update}" ]]; then
            loguj -i -t "${ltype}" "App already installed: ${appinstall}"
            return 0
        fi
    fi

    cmdinstall="${__sudo} ${sudo_options} ${pip} install ${update} ${appinstall}"
    loguj -p -i -t "${ltype}" "installing ${appinstall}... ${cmdinstall}"
    ${cmdinstall} \
        &&
        {
            loguj -l -t "${ltype}" "${appinstall}"
        } \
        ||
        {
            loguj -e -t "${ltype}" "Installing: ${__sudo} ${pip} install ${update} ${appinstall}"
            return 1
        }

    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# display_log_info
display_log_info()
{
    printf "${Yellow}>>> LOG INFO START >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
    if [[ ${#__logi_info[@]} > 0 ]]; then
        for err in "${__logi_info[@]}"; do
            printf "${err}\n"
        done
    else
        echo "== No info logs?"
    fi
    printf "${Yellow}>>> LOG INFO END >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
}

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# display_log_error
display_log_error()
{
    printf "${Yellow}>>> LOG ERROR START >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
    if [[ ${#__logi_errors[@]} > 0 ]]; then
        for err in "${__logi_errors[@]}"; do
            printf "${err}\n"
        done
    else
        echo "=== No Errors."
    fi
    printf "${Yellow}>>> LOG ERROR END >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# update_repos
update_repos()
{
    if hash apt-get 2>/dev/null; then
        read -p "Do apt-get update (y/n)? " -n 1 -r
        echo
        if [[ ${REPLY} =~ ^[Yy]$ ]]; then
            ${__sudo} apt-get update
            ${__sudo} apt-get upgrade -qyf
        fi

    fi
}
