#!/usr/bin/env bash

print_help()
{
    echo "CLI options:"
    echo "  -l      :: break links"
    echo "  -d      :: install dotfiles"
    echo "  -t      :: (DEBUG) run only TEST function"
    return 0
}

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# loguj [OPTIONS] <MSG>
# log format
# [TAG][TYPE][MSG]
# OPTIONS
#   -i  :: info
#   -s  :: info installed (default)
#   -l  :: info linked
#   -c  :: info cloned
#   -d  :: info downloaded
#   -ss :: section start
#   -se :: section end
#   -e  :: err
#   -w  :: warn
#   -p  :: print only (do not add to arrays)
#   -t <TAG> ::
# __logi_errors=()
# __logi_info=()
loguj()
{
    local ltag=" ? "
    local ltype="INFO_INSTALLED"
    local lmsg=""
    local lprefix="==="
    local ltmp=""
    local if_print_only="N"
    local color=""

    while [[ $# > 0 ]]; do
        case $1 in
            -i)
                ltype="INFO"
                shift
                ;;
            -s)
                ltype="INFO_INSTALLED"
                shift
                ;;
            -l)
                ltype="INFO_LINKED"
                shift
                ;;
            -c)
                ltype="INFO_CLONED"
                shift
                ;;
            -d)
                ltype="INFO_DOWNLOADED"
                shift
                ;;
            -ss)
                ltype="SEC_START"
                color="${Yellow}"
                shift
                ;;
            -se)
                ltype="SEC_END"
                color="${Yellow}"
                shift
                ;;
            -e)
                ltype="ERROR"
                color="${Red}"
                shift
                ;;
            -w)
                ltype="WARN"
                color="${Red}"
                shift
                ;;
            -t)
                shift
                ltag="$1"
                shift
                ;;
            -p)
                shift
                if_print_only="Y"
                ;;
            -u)
                shift
                ltype="UPDATED"
                ;;
            *)
                if [[ -z "${lmsg}" ]]; then
                    lmsg="$1"
                    shift
                else
                    echo "===[LOG][ERR ]: Unknown option? ($1)"
                    __logi_info+=("[LOG][ERR ]: Unknown option? ($1)")
                    __logi_errors+=("[LOG][ERR ]: Unknown option? ($1)")
                    return 99
                fi
            ;;
        esac
    done

    if [[ "${ltype}" = "INFO" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]:${Color_Off} ${lmsg}"
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_INSTALLED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: INSTALLED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_LINKED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: LINKED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_CLONED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: CLONED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "INFO_DOWNLOADED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: DOWNLOADED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "UPDATED" ]]; then
        ltmp="${color}${lprefix}[${ltag}][INFO]: UPDATED:${Color_Off} ${lmsg} "
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "SEC_START" ]]; then
        ltmp="${color}${lprefix}[${ltag}]==================<<< START: ${lmsg} >>>==================${Color_Off}"
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "SEC_END" ]]; then
        ltmp="${color}${lprefix}[${ltag}]==================<<< END: ${lmsg} >>>==================${Color_Off}"
        printf "${ltmp}\n"
        [[ "${if_print_only}" = "N" ]] && __logi_info+=("${ltmp}")
    elif [[ "${ltype}" = "WARN" ]]; then
        ltmp="${color}${lprefix}[${ltag}][WARN]:${Color_Off} ${lmsg}"
        printf "${ltmp}\n"
        if [[ "${if_print_only}" = "N" ]]; then
            __logi_info+=("${ltmp}")
            __logi_errors+=("${ltmp}")
        fi
    elif [[ "${ltype}" = "ERROR" ]]; then
        ltmp="${color}${lprefix}[${ltag}][ERRO]:${Color_Off} ${lmsg}"
        printf "${ltmp}\n"
        if [[ "${if_print_only}" = "N" ]]; then
            __logi_info+=("${ltmp}")
            __logi_errors+=("${ltmp}")
        fi
    else
        __logi_info+=("wrong ltype=${ltype}")
        __logi_errors+=("wrong ltype=${ltype}")
        return 99
    fi

    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_link [OPTIONS] <SRC_FILE> <DST_LINK>
# OPTIONS:
#    -w  :: create windows hard link (otherwise it's linux soft link)
#    -c  :: cp instead of creating link
#    -b  :: backup old file/dir (otherwise just remove it)
#    -s  :: use sudo while creating link
# $1 = source file
# $2 = destination = link path/link
install_link()
{
    local link_type="LINUX"
    local if_backup="N"
    local src_file=""
    local dst_link=""
    local ltype="LNK"
    local sudo_if=

    while [[ $# > 0 ]]; do
        case $1 in
            -w) link_type="WIN HARD"
                shift
                ;;
            -c) link_type="CP"
                shift
                ;;
            -b) if_backup="Y"
                shift
                ;;
            -s) sudo_if=${__sudo}
                shift
                ;;
            *) # SRC_FILE + DST_LINK
                if [[ -z "${src_file}" ]]; then
                    src_file="$1"
                elif [[ -z "${dst_link}" ]]; then
                    dst_link="$1"
                else
                    loguj -e -t "${ltype}" "Unknown option? ($1)"
                    return 3
                fi
                shift
                ;;
        esac
    done

    # check if right os:
    if [[ "${link_type}" = "WIN HARD" && "${__myos}" != "CYGWIN" ]]; then
        loguj -i -t "${ltype}" "Not cygwin, not linking: ${src_file} ===TO=== ${dst_link}"
        return 1
    fi
    # check if src exists:
    if [[ ! -e "${src_file}" ]]; then
        loguj -e -t "${ltype}" "Src file ${src_file} does not exists."
        return 1
    fi
    src_file="$(readlink -f ${src_file})"

    # check if parent directory of dst exists:
    if [[ ! -d "$(cd "$(dirname "${dst_link}")" && pwd)" ]]; then
        loguj -e -t "${ltype}" "Parent directory of ${dst_link} does not exists."
        return 1
    fi

    # dst_link="$(readlink -f ${dst_link})"

    # remove dst if it's a link
    if [[ -L "${dst_link}" ]]; then
        ${sudo_if} rm "${dst_link}"
    fi

    # backup dst
    if [[ -e ${dst_link} && ! -L ${dst_link} ]]; then
        if [[ ${if_backup} = "Y" ]]; then
            local backup_file="${dst_link}.old"
            if [[ -e ${backup_file} ]]; then
                loguj -p -i -t "${ltype}" "NOT doing backup, it already exists (${backup_file})"
                ${sudo_if} rm "${dst_link}"
                # ${sudo_if} rm -rf "${dst_link}"
            else
                loguj -p -i -t "${ltype}" "Backup ${backup_file}"
                ${sudo_if} mv "${dst_link}" "${backup_file}"
            fi
        else
            rm -rf "${dst_link}"
        fi
    fi

    # linking:
    if [[ $link_type = "WIN HARD" ]]; then
        # loguj -i -t "${ltype}" "LINKED: Win: $(basename ${dst_link} .sh)"
        loguj -l -t "${ltype}" "Win: $(basename ${dst_link} .sh)"
        if [[ -d ${src_file} ]]; then
            cmd /c mklink /J "$(cygpath -aw ${dst_link})" "$(cygpath -aw ${src_file})"
        else
            cmd /c mklink /H "$(cygpath -aw ${dst_link})" "$(cygpath -aw ${src_file})"
        fi
    elif [[ $link_type = "CP" ]]; then
        # loguj -p -i -t "${ltype}" "COPY ${dst_link} ---to--- ${src_file} ---... "
        loguj -i -t "${ltype}" "CP: $(basename ${dst_link} .sh)"
        ${sudo_if} cp "${src_file}" "${dst_link}"
    elif [[ $link_type = "LINUX" ]]; then
        # loguj -p -i -t "${ltype}" "Linux ${dst_link} ---to--- ${src_file} ---... "
        loguj -l -t "${ltype}" "Lin: $(basename ${dst_link} .sh)"
        ${sudo_if} ln -s "${src_file}" "${dst_link}"
    else
        loguj -e -t "${ltype}" "bledny link_type: ${link_type}"
        return 99
    fi ||
        {
            loguj -e -t "${ltype}" "$(basename ${dst_link} .sh)"
            return 99
        }

    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# display_log_info
display_log_info()
{
    printf "${Yellow}>>> LOG INFO START >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
    if [[ ${#__logi_info[@]} > 0 ]]; then
        for err in "${__logi_info[@]}"; do
            printf "${err}\n"
        done
    else
        echo "== No info logs?"
    fi
    printf "${Yellow}>>> LOG INFO END >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# display_log_error
display_log_error()
{
    printf "${Yellow}>>> LOG ERROR START >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
    if [[ ${#__logi_errors[@]} > 0 ]]; then
        for err in "${__logi_errors[@]}"; do
            printf "${err}\n"
        done
    else
        echo "=== No Errors."
    fi
    printf "${Yellow}>>> LOG ERROR END >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>${Color_Off}\n"
}

