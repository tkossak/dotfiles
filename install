#!/usr/bin/env bash

# run na vb - linux mint, basic
# BUG: pip - app alrady installed - pip is too old, install via get-pip and check version earlier
# BUG: przy evil-leader + key-chord: pusty Run w logu wyskakuje - zawsze po procedurze GETURL

# TODO: check return codes everywhere
# TODO: add youtube-dl -U
# TODO: fzf - cancel interactive script! provide Y
# TODO: change aptget: use apt-cache to check if it's updated or older version. If older, then update it.
# TODO: geturl() - jeśli plik istnieje i ma taie samo sha1 to nie ściągaj go ponownie
# NEW OPTIONS
#    -u :: update

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
# __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
# __base="$(basename ${__file} .sh)"
# __root="$(cd "$(dirname "${__dir}")" && pwd)"

# magic variables for links
__file="$(readlink -f ${BASH_SOURCE[0]})"
__dir="$(cd "$(dirname "${__file}")" && pwd)"

arg1="${1:-}"
# ================================================================================
# UPDATE GLOBAL VARS

source ${__dir}/install.source

__myos="$(uname -s)"
__myhost="$(uname -n)"
            case ${__myos} in
                CYGWIN*)
                    __myos="CYGWIN"
                    if [[ ${__myhost} = AWA* ]]; then
                        __myhost="W"
                    elif [[ ${__myhost} = HEAVEN ]]; then
                        __myhost="H"
                    else
                        __myhost="OTHER"
                    fi
                    ;;
                Linux)
                    __myos="LINUX"
                    if [[ ${__myhost} = LMQ ]]; then
                        __myhost="H"
                    else
                        __myhost="OTHER"
                    fi
                    ;;
                *)
                    __myos="OTHER"
                    __myhost="OTHER"
                    ;;
            esac

__dir_dlocal="$(cd "$(dirname "${__dir}")" && pwd)/dotfiles.local"
__dir_dlocal="$(readlink -f ${__dir_dlocal})"
hash cygpath 2>/dev/null \
    && __win_appdata="$(cygpath -au ${APPDATA:-})" || __win_appdata=""
hash sudo 2>/dev/null \
    && __sudo="sudo" \
    || __sudo=""



# aptget install cmd:
__aptget_install_cmd=""
__aptget_check_cmd=""
if hash apt-get 2>/dev/null; then
    __aptget_install_cmd="${__sudo} apt-get install -qyf"
else
    loguj -w -t "---" "No aptget command"
fi
if hash dpkg 2>/dev/null; then
    __aptget_check_cmd="dpkg -s"
else
    loguj -w -t "---" "No aptget-check command"
fi

__logi_errors=()
__logi_info=()

if hash curl 2>/dev/null; then
    __geturl_app="curl -fL -o"
elif hash wget 2>/dev/null; then
    __geturl_app="wget -O"
else
    loguj -e -t "---" "curl/wget not present"
fi

# ================================================================================
# Initial cmds:

mkdir -p ~/apps
mkdir -p ~/.emacs.d/mine
# mkdir -p ~/.emacs.d/evil
[[ -d ${__win_appdata} ]] &&
    mkdir -p ${__win_appdata}/.emacs.d/mine
find ${__dir}/bin -type f -not -name 'create_bash.model' -exec chmod +x {} \;
find ${__dir} -maxdepth 1 -type f -not -name 'install' -exec chmod -x {} \;


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# break_links()
break_links()
{
    local ltype="BRK"
    local src
    loguj -ss -t "${ltype}" "BREAKING LINKS"
    for link in ~/.tmux.conf ~/.vimrc ~/.vimrc.local ~/.bashrc ~/.bashrc.local ~/.emacs ~/.emacs.d/mine/.emacs.local ~/.gitconfig ~/.gitconfig.local ~/.config/ranger/rc.conf ~/.config/ranger/rifle.conf ~/.mplayer/config ~/.mplayer/input.conf \
        ~/.weechat/guile ~/.weechat/javascript ~/.weechat/lua ~/.weechat/perl ~/.weechat/python ~/.weechat/ruby ~/.weechat/script ~/.weechat/tcl ~/.weechat/xfer ~/.weechat/alias.conf ~/.weechat/aspell.conf ~/.weechat/buffers.conf ~/.weechat/charset.conf ~/.weechat/exec.conf ~/.weechat/irc.conf ~/.weechat/iset.conf ~/.weechat/logger.conf ~/.weechat/plugins.conf ~/.weechat/relay.conf ~/.weechat/script.conf ~/.weechat/sec.conf ~/.weechat/trigger.conf ~/.weechat/weechat.conf ~/.weechat/xfer.conf
    do
        if [[ -e "${link}" ]]; then
            src="$(readlink -f ${link})"
        else
            src=""
            loguj -i -t "${ltype}" "Dst file does not exist: ${link}"
            continue
        fi

        if [[ ! -L "${link}" ]]; then
           loguj -i -t "${ltype}" "Not a link: ${link}"
        elif [[ -n "${src}" && ! -r ${src} ]]; then
            loguj -e -t "${ltype}" "Src file is not readable! (${src})"
        elif [[ -L "$link" ]]; then
            rm -rf "${link}"
            cp -r "${src}" ${link}
            # cp --remove-destination "$(readlink ${link})" ${link}
            loguj -i -t "${ltype}" "UNLINKED: ${link}"
        else
            loguj -e -t "${ltype}" "Unknown case"
        fi
    done
    loguj -se -t "${ltype}" "BREAKING LINKS"
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_dotfiles
install_dotfiles()
{
    local ltype="DOT"
    loguj -ss -t "${ltype}" "DOTFILES"

    # Folders:
    create_link ${__dir} ~/.dotfiles
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal} ~/.dotfiles.local
    # [[ -d ${__dir_dlocal} ]] && chmod -x ${__dir_dlocal}/*
    [[ -d ${__dir_dlocal} ]] && find ${__dir_dlocal} -maxdepth 1 -type f -exec chmod -x {} \;

    # TMUX
    create_link ${__dir}/tmux.conf ~/.tmux.conf

    # Git
    create_link ${__dir}/gitconfig ~/.gitconfig
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/gitconfig.local ~/.gitconfig.local

    # Bash:
    create_link ${__dir}/bashrc ~/.bashrc
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/bashrc.local ~/.bashrc.local


    # Vim
    create_link ${__dir}/vimrc ~/.vimrc
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/vimrc.local ~/.vimrc.local

    # Emacs Linux:
    if hash emacs 2>/dev/null; then
        create_link ${__dir}/emacs ~/.emacs
        [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/emacs.local ~/.emacs.d/mine/.emacs.local
    fi

    # Emacs Win:
    if [[ -d ${__win_appdata} ]]; then
        create_link -w ${__dir}/emacs ${__win_appdata}/.emacs
        [[ -d ${__dir_dlocal} ]] && create_link -w ${__dir_dlocal}/emacs.local ${__win_appdata}/.emacs.d/mine/.emacs.local
        # evil-leader:
        create_link -w ~/.emacs.d/mine/evil-leader.el ${__win_appdata}/.emacs.d/mine/evil-leader.el
        # key-chord:
        create_link -w ~/.emacs.d/mine/key-chord.el ${__win_appdata}/.emacs.d/mine/key-chord.el
        # evil:
        create_link -w ~/.emacs.d/evil ${__win_appdata}/.emacs.d/evil
        # org-mode:
        create_link -w ~/.emacs.d/org-mode ${__win_appdata}/.emacs.d/org-mode
    fi

    # Emacs local files Linux + Win
    if [[ -d ${__dir_dlocal} ]]; then
        create_link ${__dir_dlocal} ~/.dotfiles.local
        create_link ${__dir_dlocal}/bashrc.local ~/.bashrc.local
        create_link ${__dir_dlocal}/vimrc.local ~/.vimrc.local
        create_link ${__dir_dlocal}/gitconfig.local ~/.gitconfig.local
        create_link ${__dir_dlocal}/emacs.local ~/.emacs.d/mine/.emacs.local
        [[ -d ${__win_appdata} ]] && create_link -w ${__dir_dlocal}/emacs.local ${__win_appdata}/.emacs.d/mine/.emacs.local
    else
        loguj -i -t "${ltype}" "Emacs: no local dir."
    fi

    #Ranger:
    # if hash ranger 2>/dev/null; then
    #     sed -i 's/^set column_ratios 1,5,3$/set column_ratios 1,3,4' ~/.config/ranger/rc.conf
    # fi
    if hash ranger 2>/dev/null; then
        find ~/.config/ranger -type f -not -name 'bookmarks' -not -name 'history' -not -name 'tagged' -exec rm -rf {} \;
        ranger --copy-config=all
        sed -i 's/^set column_ratios 1,3,4$/set column_ratios 1,5,3/;
        s/^set show_hidden false$/set show_hidden true/;
        s/^set preview_files true$/set preview_files false/
        s/^set preview_files true$/set preview_files false/
        s/^set preview_directories true$/set preview_directories false/' ~/.config/ranger/rc.conf


        if [[ -d "${__dir_dlocal}" ]]; then
            case ${__myos} in
                CYGWIN)
                    if [[ ${__myhost} = W ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.w.cygwin ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dlocal}/rifle.conf.w.cygwin > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-W)"
                    elif [[ ${__myhost} = H ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.h.cygwin ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dlocal}/rifle.conf.h.cygwin > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-H)"
                    else
                        # loguj -i -t "${ltype}" "Ranger - cygwin - unknown host Copying default file."
                        cat ~/.config/ranger/rifle.conf ${__dir}/rifle.conf > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-OTHER)"
                    fi
                    ;;
                LINUX)
                    if [[ ${__myhost} = H ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.h.linux ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dlocal}/rifle.conf.h.linux > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (L-H)"
                    else
                        loguj -i -t "${ltype}" "Ranger - linux - unknown host Copying default file."
                        cat ~/.config/ranger/rifle.conf ${__dir}/rifle.conf > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (L-OTHER)"
                    fi
                    ;;
                *)
                    cat ~/.config/ranger/rifle.conf ${__dir}/rifle.conf > ~/.config/ranger/rifletmp.conf
                    mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                    loguj -i -t "${ltype}" "CP: rifle.conf (OTHER-OTHER)"
                    ;;
            esac
        else
            cat ~/.config/ranger/rifle.conf ${__dir}/rifle.conf > ~/.config/ranger/rifletmp.conf
            mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
            # loguj -i -t "${ltype}" "Ranger - no local dotfiles. Copying default file."
            loguj -i -t "${ltype}" "CP: rifle.conf (default - no local dotfiles)"
        fi
    else
        loguj -i -t "${ltype}" "Ranger not found. Not creating links."
    fi

    # mplayer
    if hash mplayer 2>/dev/null || [[ -d ~/.mplayer ]]; then
        create_link ${__dir}/mplayer_config ~/.mplayer/config
        create_link ${__dir}/mplayer_input.conf ~/.mplayer/input.conf
    fi

    # weechat
    if ( hash weechat 2>/dev/null || [[ -d ~/weechat ]] ) && [[ -d ${__dir_dlocal} ]]; then
        if [[ -d ${__dir_dlocal}/weechat ]]; then
           create_link ${__dir_dlocal}/weechat/guile ~/.weechat/guile
           create_link ${__dir_dlocal}/weechat/javascript ~/.weechat/javascript
           create_link ${__dir_dlocal}/weechat/lua ~/.weechat/lua
           create_link ${__dir_dlocal}/weechat/perl ~/.weechat/perl
           create_link ${__dir_dlocal}/weechat/python ~/.weechat/python
           create_link ${__dir_dlocal}/weechat/ruby ~/.weechat/ruby
           create_link ${__dir_dlocal}/weechat/script ~/.weechat/script
           create_link ${__dir_dlocal}/weechat/tcl ~/.weechat/tcl
           create_link ${__dir_dlocal}/weechat/xfer ~/.weechat/xfer
           create_link ${__dir_dlocal}/weechat/alias.conf ~/.weechat/alias.conf
           create_link ${__dir_dlocal}/weechat/aspell.conf ~/.weechat/aspell.conf
           create_link ${__dir_dlocal}/weechat/buffers.conf ~/.weechat/buffers.conf
           create_link ${__dir_dlocal}/weechat/charset.conf ~/.weechat/charset.conf
           create_link ${__dir_dlocal}/weechat/exec.conf ~/.weechat/exec.conf
           create_link ${__dir_dlocal}/weechat/irc.conf ~/.weechat/irc.conf
           create_link ${__dir_dlocal}/weechat/iset.conf ~/.weechat/iset.conf
           create_link ${__dir_dlocal}/weechat/logger.conf ~/.weechat/logger.conf
           create_link ${__dir_dlocal}/weechat/plugins.conf ~/.weechat/plugins.conf
           create_link ${__dir_dlocal}/weechat/relay.conf ~/.weechat/relay.conf
           create_link ${__dir_dlocal}/weechat/script.conf ~/.weechat/script.conf
           create_link ${__dir_dlocal}/weechat/sec.conf ~/.weechat/sec.conf
           create_link ${__dir_dlocal}/weechat/trigger.conf ~/.weechat/trigger.conf
           create_link ${__dir_dlocal}/weechat/weechat.conf ~/.weechat/weechat.conf
           create_link ${__dir_dlocal}/weechat/xfer.conf ~/.weechat/xfer.conf

        else
            loguj -i -t "${ltype}" "No weechat local dotfiles."
        fi
    fi

    vim +PluginInstall +PluginClean +qall

    loguj -se -t "${ltype}" "DOTFILES"
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
install_apps_basic3_new_comp()
{

    local ltype="BA3"
    loguj -ss -t "${ltype}" "BASICS 3"

    # Emacs
    aptget emacs || true
    if hash emacs 2>/dev/null; then
        # evil-leader:
        geturl https://raw.githubusercontent.com/cofi/evil-leader/master/evil-leader.el ~/.emacs.d/mine/evil-leader.el -sha1 00c336e55307dbcb3f73f47b1d9a1d759404341d || true
        # key-chord:
        geturl http://www.emacswiki.org/emacs/download/key-chord.el ~/.emacs.d/mine/key-chord.el -sha1 2da61bf970ca332c4de96c1977fc7e326df6c33a || true
        # evil:
        gitclone https://gitorious.org/evil/evil.git ~/.emacs.d/evil \
            ||
            {
                loguj -i -t "${ltype}" "Manually downloading evil.git"
                rm -rf ~/.emacs.d/evil
                rm -rf ~/.emacs.d/lyro-evil*
                cd ~/.emacs.d
                if [[ ! -f evil-default.zip ]]; then
                    ${__geturl_app} evil-default.zip https://bitbucket.org/lyro/evil/get/default.zip \
                        ||
                        {
                            loguj -e -t "${ltype}" "Downloading evil.git (default.zip)"
                        } \
                        &&
                        {
                            unzip evil-default.zip
                            mv ~/.emacs.d/lyro-evil* evil
                            rm ~/.emacs.d/evil-default.zip
                            loguj -d -t "${ltype}" "evil"
                            loguj -e -t "${ltype}" "Evil downloaded manually."
                        }
                fi
            }
        # org-mode:
        gitclone git://orgmode.org/org-mode.git ~/.emacs.d/org-mode "git checkout -b stable origin/maint" "git pull" "make autoloads" || true
    fi

    # geeknote
    gitclone https://github.com/VitaliyRodnenko/geeknote.git ~/apps/geeknote "${__sudo} python setup.py install" "geeknote settings --editor vim" || true

    # Reszta BASICS 3:
    pipinstall -3 BeautifulSoup4 || true

    # flake8
    pipinstall -3 flake8 || true

    # bashate
    pipinstall -3 bashate || true

    # httpie
    pipinstall httpie || true

    # geeknote login....?
    loguj -se -t "${ltype}" "BASICS 3"
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_apps_basics2
install_apps_basics2()
{

    local ltype="BA2"
    loguj -ss -t "${ltype}" "BASICS 2"

    # commacd
    geturl https://raw.githubusercontent.com/shyiko/commacd/master/commacd.bash ~/.commacd.bash || true

    # glances
    aptget -ol glances \
        &&
        {
            aptget lm-sensors || true
            pipinstall -2 -H PySensors || true
        } || true

    # speedtest-cli
    pipinstall -2 speedtest-cli || true

    # fzf - asks questions
    if [[ ! -d ~/.fzf ]]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install || true
    fi

    # geeknote login
    loguj -se -t "${ltype}" "BASICS 2"
    return 0
}

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_apps_basic
install_apps_basic()
{

    local ltype="BA1"
    loguj -ss -t "${ltype}" "BASICS 1"

    # update repositories
    # if hash apt-get 2>/dev/null; then
    #     ${__sudo} apt-get update
    # fi

    # curl
    aptget curl && __geturl_app="curl -o" || true

    # wget
    aptget wget && __geturl_app="wget -O" || true

    # git
    aptget git || true

    # vim
    aptget vim || true

    # make
    aptget make || true

    # vim-vundle
    gitclone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim || true

    # PIP2
    local if_getpip_downloaded="0"
    local cur_pip_verson="7.1.0"
    local cur_pip_sha1="89eb61fc5b59f14df7f0aa7b020afb5a6ded2e14"
    local installer="/tmp/get-pip.py"
    local cur_python_cmd="python2"
    local cur_pip_cmd="pip2"
    local ver=""

    # check czy juz istnieje:
    if [[ -e "${installer}" ]]; then
        if checksum "${installer}" -sha1 "${cur_pip_sha1}"; then
            if_getpip_downloaded=1
        else
            rm -rf "${installer}"
        fi
    fi

    if hash ${cur_python_cmd} 2>/dev/null; then
        hash ${cur_pip_cmd} 2>/dev/null \
            && ver="$(${cur_pip_cmd} --version | sed 's/ /\n/g' | sed -n '2p')" \
            || ver="no ${cur_pip_cmd}"

        if [[ "${ver}" != "${cur_pip_verson}" ]]; then
            # download
            loguj -i -t "${ltype}" "Current ${cur_pip_cmd} version: ${ver}. Installing."
            if [[ "${if_getpip_downloaded}" = "0" ]]; then
                geturl https://bootstrap.pypa.io/get-pip.py "${installer}" -sha1 "${cur_pip_sha1}" \
                    && if_getpip_downloaded="1"
            fi

            # install
            if [[ "${if_getpip_downloaded}" = "1" ]]; then
                ${__sudo} -H ${cur_python_cmd} "${installer}" \
                    && loguj -s -t "${ltype}" "${cur_pip_cmd}" \
                    || loguj -e -t "${ltype}" "Problem instalilng ${cur_pip_cmd}"
            else
                loguj -e -t "${ltype}" "Problem downloading ${cur_pip_cmd}"
            fi
        else
            loguj -i -t "${ltype}" "${cur_pip_cmd} is already up to date (${ver})"
        fi
    fi

    # PIP3
    cur_python_cmd="python3"
    cur_pip_cmd="pip3"
    if hash ${cur_python_cmd} 2>/dev/null; then
        hash ${cur_pip_cmd} 2>/dev/null \
            && ver="$(${cur_pip_cmd} --version | sed 's/ /\n/g' | sed -n '2p')" \
            || ver="no ${cur_pip_cmd}"

        if [[ "${ver}" != "${cur_pip_verson}" ]]; then
            # download
            loguj -i -t "${ltype}" "Current ${cur_pip_cmd} version: ${ver}. Installing."
            if [[ "${if_getpip_downloaded}" = "0" ]]; then
                geturl https://bootstrap.pypa.io/get-pip.py "${installer}" -sha1 "${cur_pip_sha1}" \
                    && if_getpip_downloaded="1"
            fi

            # install
            if [[ "${if_getpip_downloaded}" = "1" ]]; then
                ${__sudo} -H ${cur_python_cmd} "${installer}" \
                    && loguj -s -t "${ltype}" "${cur_pip_cmd}" \
                    || loguj -e -t "${ltype}" "Problem instalilng ${cur_pip_cmd}"
            else
                loguj -e -t "${ltype}" "Problem downloading ${cur_pip_cmd}"
            fi
        else
            loguj -i -t "${ltype}" "${cur_pip_cmd} is already up to date (${ver})"
        fi
    fi

    [[ "${if_getpip_downloaded}" = "1" ]] && rm -rf "${installer}"

    # Ranger
    # rm -rf ~/apps/ranger ~/.config/ranger
    gitclone https://github.com/hut/ranger.git ~/apps/ranger "${__sudo} make install" "ranger --copy-config=all" || true

    # TMUX
    aptget tmux || true

    # dtrx
    if ! hash dtrx 2>/dev/null; then
        rm -rf /tmp/dtrx-7.1
        geturl -d http://brettcsmith.org/2007/dtrx/dtrx-7.1.tar.gz /tmp/dtrx-7.1.tar.gz -sha1 05cfe705a04a8b84571b0a5647cd2648720791a4 "tar -xf dtrx-7.1.tar.gz" "cd dtrx-7.1" "${__sudo} python setup.py install --prefix=/usr/local" "rm -rf /tmp/dtrx-7.1" "rm -rf /tmp/dtrx-7.1.tar.gz" || true
    fi
    # aptget dtrx ||
    #     {
    #         rm -rf /tmp/dtrx-7.1
    #         geturl -d http://brettcsmith.org/2007/dtrx/dtrx-7.1.tar.gz /tmp/dtrx-7.1.tar.gz -sha1 05cfe705a04a8b84571b0a5647cd2648720791a4 "tar -xf dtrx-7.1.tar.gz" "cd dtrx-7.1" "${__sudo} python setup.py install --prefix=/usr/local" "rm -rf /tmp/dtrx-7.1" "rm -rf /tmp/dtrx-7.1.tar.gz" || true
    #     }

    # fasd
    gitclone https://github.com/clvv/fasd.git ~/apps/fasd "${__sudo} make install" || true

    loguj -se -t "${ltype}" "BASICS 1"
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

testowanie()
{

    echo "start testowanie()"
    geturl http://www.wp.pl/index.html /tmp/1.html
    echo "end testowanie()"

    # local if_getpip_downloaded="0"
    # local cur_pip_verson="7.1.0"
    # local cur_pip_sha1="89eb61fc5b59f14df7f0aa7b020afb5a6ded2e14"
    # local installer="/tmp/get-pip.py"
    # local cur_python_cmd="python2"
    # local cur_pip_cmd="pip2"
    # local ver=""

    # # check czy juz istnieje:
    # if [[ -e "${installer}" ]]; then
    #     if checksum "${installer}" -sha1 "${cur_pip_sha1}"; then
    #         if_getpip_downloaded=1
    #     else
    #         [[ -e "${installer}" ]] && rm -rf "${installer}"
    #     fi
    # fi

    # if hash ${cur_python_cmd} 2>/dev/null; then
    #     ver=""
    #     hash ${cur_pip_cmd} 2>/dev/null \
    #         && ver="$(${cur_pip_cmd} --version | sed 's/ /\n/g' | sed -n '2p')" \
    #         || ver="no ${cur_pip_cmd}"

    #     if [[ "${ver}" != "${cur_pip_verson}" ]]; then
    #         # download
    #         loguj -i -t "${ltype}" "Current ${cur_pip_cmd} version: ${ver}. Installing."
    #         if [[ "${if_getpip_downloaded}" = "0" ]]; then
    #             geturl https://bootstrap.pypa.io/get-pip.py "${installer}" -sha1 "${cur_pip_sha1}" \
    #                 && if_getpip_downloaded="1"
    #         fi

    #         # install
    #         if [[ "${if_getpip_downloaded}" = "1" ]]; then
    #             ${__sudo} -H ${cur_python_cmd} "${installer}" \
    #                 && loguj -s -t "${ltype}" "${cur_pip_cmd}" \
    #                 || loguj -e -t "${ltype}" "Problem instalilng ${cur_pip_cmd}"
    #         else
    #             loguj -e -t "${ltype}" "Problem downloading ${cur_pip_cmd}"
    #         fi
    #     else
    #         loguj -i -t "${ltype}" "${cur_pip_cmd} is already up to date (${ver})"
    #     fi
    # fi
    return 0
}

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if_dotfiles="N"
if_basics1="N"
if_basics2="N"
if_basics3_new_comp="N"
if_break_links="N"
ltype="---"

[[ $# = 0 ]] && if_dotfiles="Y"

while [[ $# > 0 ]]; do
    case "$1" in

        -h|--help)
            echo "CLI options:"
            echo "  -l  :: break links"
            echo "  -d  :: install dotfiles"
            echo "  -b  :: install dotfiles + basics 1"
            echo "  -a  :: install dotfiles + basics 1 + 2"
            echo "  -A  :: install dotfiles + basics 1 + 2 + 3 (new comp)"
            exit 0
            ;;

        -l)
            shift
            if_break_links="Y"
            ;;

        -d)
            shift
            if_dotfiles="Y"
            ;;

        -b)
            shift
            if_break_links="Y"
            if_basics1="Y"
            if_dotfiles="Y"
            ;;

        -a)
            shift
            if_break_links="Y"
            if_basics1="Y"
            if_basics2="Y"
            if_dotfiles="Y"
            ;;

        -A)
            shift
            if_break_links="Y"
            if_basics1="Y"
            if_basics2="Y"
            if_basics3_new_comp="Y"
            if_dotfiles="Y"
            ;;

        *)
            loguj -e -t "${ltype}" "Unknown option: $1"
            exit 1
            ;;
    esac
done

# ===================================
# start
# echo "START TESTING=================================================================="
# testowanie
# echo "KONIEC TESTIN=================================================================="
# exit
# end
# ===================================

[[ ${if_break_links} = "Y" ]] && break_links

# update repos?
if [[ ( ${if_basics1} = "Y" || ${if_basics2} = "Y" ) ]] && hash apt-get 2>/dev/null; then
    read -p "Do apt-get update (y/n)? " -n 1 -r
    echo
    if [[ ${REPLY} =~ ^[Yy]$ ]]; then
        ${__sudo} apt-get update
    fi

fi

[[ ${if_basics1} = "Y" ]] && install_apps_basic
[[ ${if_basics2} = "Y" ]] && install_apps_basics2
[[ ${if_basics3_new_comp} = "Y" ]] && install_apps_basic3_new_comp
[[ ${if_dotfiles} = "Y" ]] && install_dotfiles

# display info logs
if [[ ${#__logi_info[@]} > 0 ]]; then
    echo "=== LOG INFO =========================================================================="
    for err in "${__logi_info[@]}"; do
        echo ${err}
    done
else
    echo "== No info logs?"
fi

# display ERROR logs
if [[ ${#__logi_errors[@]} > 0 ]]; then
    echo "=== LOG ERRORS =========================================================================="
    for err in "${__logi_errors[@]}"; do
        echo ${err}
    done
else
    echo "=== No Errors."
fi

