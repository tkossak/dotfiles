#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# magic variables for links
__sfile="$(readlink -f ${BASH_SOURCE[0]})"
__dir_dotfiles="$(cd "$(dirname "${__sfile}")" && pwd)"
__dir_dotlocal="$(cd "$(dirname "${__dir_dotfiles}")" && pwd)/dotfiles.local"
__dir_dotlocal="$(readlink -f ${__dir_dotlocal})"
__dir_installers="/tmp/installers"

# --------------------------------------------------------------------------------
source ${__dir_dotfiles}/source/src_bash_install

print_help()
{
    echo "CLI options:"
    echo "  -l      :: break links"
    echo "  -d      :: install dotfiles"
    echo "  -b, -1  :: install dotfiles + basics 1"
    echo "  -a, -2  :: install dotfiles + basics 1 + 2"
    echo "  -A, -3  :: install dotfiles + basics 1 + 2 + 3 (new comp)"
    echo "  -u      :: update existing apps"
    echo "  -t      :: (DEBUG) run only TEST function"
    return 0
}

if [[ $# = 0 ]]; then
    print_help
    exit 0
fi

ltype="---"
__if_dotfiles="N"
__app_lvl=0
__if_break_links="N"
__if_testing="N"
__if_update="N"

__dir_gvim_root="/cygdrive/d/Kossak/progs/gvim"
if [[ -d "${__dir_gvim_root}" ]]; then
    __file_gvim_plug="${__dir_gvim_root}/autoload/plug.vim"
    __dir_gvim_home="/cygdrive/k"
else
    __dir_gvim_root=""
fi


[[ $# = 0 ]] && __if_dotfiles="Y"

while getopts ":hldb1a2A3tu" opt; do
    case "$opt" in
        h)
            print_help
            exit 0
            ;;
        u)
            __if_update="Y"
            ;;
        l)
            __if_break_links="Y"
            ;;
        d)
            __if_dotfiles="Y"
            ;;
        b|1)
            __app_lvl=1
            __if_dotfiles="Y"
            ;;
        a|2)
            __app_lvl=2
            __if_dotfiles="Y"
            ;;
        A|3)
            __app_lvl=3
            __if_dotfiles="Y"
            ;;
        t)
            __if_testing="Y"
            ;;

        \?)
            loguj -e -t "${ltype}" "Unknown option: $1"
            print_help
            exit 1
            ;;
        :)
            loguj -e -t "${ltype}" "Option -${OPTARG} requires an argument."
            print_help
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))
OPTIND=1

# ================================================================================
# print environment
printf "${Yellow}=== ENVIRONMENT ==================================================${Color_Off}\n"
echo "__dir_dotfiles=${__dir_dotfiles}"
if [[ -d "${__dir_dotlocal}" ]]; then
    echo "__dir_dotlocal (exists) =${__dir_dotlocal}"
else
    echo "__dir_dotlocal (NOT exists) =${__dir_dotlocal}"
fi
if [[ -d "${__dir_win_home}" ]]; then
    echo "__dir_win_home (exists) =${__dir_win_home}"
else
    echo "__dir_win_home (NOT exists) =${__dir_win_home}"
fi
echo "__myos=${__myos}"
echo "__myhost=${__myhost}"
echo "__app_lvl=${__app_lvl}"
echo "__if_update=${__if_update}"

# ================================================================================
# Initial cmds:
loguj -p -i -t "${ltype}" "Initial cmds..."
mkdir -p ${HOME}/apps
mkdir -p ${HOME}/.emacs.d/mine
mkdir -p ${HOME}/.vim/autoload
# mkdir -p ~/.emacs.d/evil
[[ -d "${__dir_dotlocal}" ]] &&
    find "${__dir_dotlocal}" -maxdepth 1 -type f -exec chmod -x {} \; || true
find "${__dir_dotfiles}/bin" -type f -exec chmod u+x {} \;
chmod -x "${__dir_dotfiles}/bin/create_bash.model"

find ${__dir_dotfiles} -maxdepth 1 -type f -exec chmod -x {} \;
[[ -e "${__dir_dotfiles}/install" ]] && chmod u+x "${__dir_dotfiles}/install"
[[ -e "${__dir_dotfiles}/i_git" ]] && chmod u+x "${__dir_dotfiles}/i_git"

[[ -d ${__dir_win_home} ]] &&
    mkdir -p ${__dir_win_home}/.emacs.d/mine

loguj -p -i -t "${ltype}" "Initial cmds... Done"

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# break_links()
break_links()
{
    local ltype="BRK"
    local src
    loguj -ss -t "${ltype}" "BREAKING LINKS"
    for link in ~/.bashrc ~/.bashrc.local ~/.tmux.conf ~/.gitconfig ~/.gitconfig.local \
        ~/.vimrc ~/.vimrc.local ~/.vimrc.plugins ~/.vimrc.functions \
        ~/.weechat/guile ~/.weechat/javascript ~/.weechat/lua ~/.weechat/perl ~/.weechat/python ~/.weechat/ruby ~/.weechat/script ~/.weechat/tcl ~/.weechat/xfer ~/.weechat/alias.conf ~/.weechat/aspell.conf ~/.weechat/buffers.conf ~/.weechat/charset.conf ~/.weechat/exec.conf ~/.weechat/irc.conf ~/.weechat/iset.conf ~/.weechat/logger.conf ~/.weechat/plugins.conf ~/.weechat/relay.conf ~/.weechat/script.conf ~/.weechat/sec.conf ~/.weechat/trigger.conf ~/.weechat/weechat.conf ~/.weechat/xfer.conf \
        ~/.config/ranger/rc.conf ~/.config/ranger/rifle.conf ~/.mplayer/config ~/.mplayer/input.conf ~/.gconf/apps/gnome-terminal ~/.config/vlc/vlcrc \
        ~/.minttyrc \
        ~/.spacemacs


    do
        if [[ -e "${link}" ]]; then
            src="$(readlink -f ${link})"
        else
            src=""
            loguj -i -t "${ltype}" "Dst file does not exist: ${link}"
            continue
        fi

        if [[ ! -L "${link}" ]]; then
           loguj -i -t "${ltype}" "Not a link: ${link}"
        elif [[ -n "${src}" && ! -r ${src} ]]; then
            loguj -e -t "${ltype}" "Src file is not readable! (${src})"
        elif [[ -L "$link" ]]; then
            rm -rf "${link}"
            cp -r "${src}" ${link}
            loguj -i -t "${ltype}" "UNLINKED: ${link}"
        else
            loguj -e -t "${ltype}" "Unknown case"
        fi
    done
    loguj -se -t "${ltype}" "BREAKING LINKS"
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_dotfiles
install_dotfiles()
{
    local ltype="DOT"
    loguj -ss -t "${ltype}" "DOTFILES"

    # TMUX
    create_link ${__dir_dotfiles}/tmux.conf ~/.tmux.conf || true

    # minttyrc
    [[ -e ${HOME}/.minttyrc ]] &&
        create_link ${__dir_dotfiles}/minttyrc ~/.minttyrc || true

    # Git
    create_link ${__dir_dotfiles}/gitconfig ~/.gitconfig || true
    create_link ${__dir_dotlocal}/gitconfig.local ~/.gitconfig.local || true

    # Bash:
    create_link ${__dir_dotfiles}/bashrc ~/.bashrc || true
    create_link ${__dir_dotlocal}/bashrc.local ~/.bashrc.local || true

    # Vim
    create_link ${__dir_dotfiles}/vimrc ~/.vimrc || true
    create_link ${__dir_dotlocal}/vimrc.local ~/.vimrc.local || true
    create_link ${__dir_dotfiles}/vimrc.plugins ~/.vimrc.plugins || true
    create_link ${__dir_dotfiles}/vimrc.functions ~/.vimrc.functions || true

    # gnome-terminal
    if [[ -d ~/.gconf/apps/gnome-terminal ]]; then
        create_link ${__dir_dotfiles}/gnome-terminal ~/.gconf/apps/gnome-terminal || true
    fi

    # Spacemacs
    if hash emacs 2>/dev/null; then
        create_link ${__dir_dotfiles}/spacemacs "${HOME}/.spacemacs" || true
        create_link ${__dir_dotlocal}/emacs.local "${HOME}/.spacemacs.local" || true

        # Win
        if [[ -d "${__dir_win_home}" ]]; then
            create_link -w ${__dir_dotfiles}/spacemacs "${__dir_win_home}/.spacemacs" || true
        fi
        if [[ -d "${__dir_win_home}/.emacs.d" ]]; then
            create_link -w ${__dir_dotlocal}/emacs.local "${__dir_win_home}/.spacemacs.local" || true
        fi
    fi

    # Emacs Linux:
    # if hash emacs 2>/dev/null; then
    #     create_link ${__dir_dotfiles}/emacs ~/.emacs || true
    #     create_link ${__dir_dotlocal}/emacs.local ~/.emacs.d/mine/.emacs.local || true
    # fi

    # Emacs Win:
    # if [[ -f ${__dir_win_home} ]]; then
    #     loguj -p -i -t "${ltype}" "Linking windows emacs links in ${__dir_win_home}"
    #     create_link -w ${__dir_dotfiles}/emacs ${__dir_win_home}/.emacs || true
    #     create_link -w ${__dir_dotlocal}/emacs.local ${__dir_win_home}/.emacs.d/mine/.emacs.local || true
    #     # evil-leader:
    #     create_link -w ~/.emacs.d/mine/evil-leader.el ${__dir_win_home}/.emacs.d/mine/evil-leader.el || true
    #     # key-chord:
    #     create_link -w ~/.emacs.d/mine/key-chord.el ${__dir_win_home}/.emacs.d/mine/key-chord.el || true
    #     # evil:
    #     create_link -w ~/.emacs.d/evil ${__dir_win_home}/.emacs.d/evil || true
    #     # org-mode:
    #     create_link -w ~/.emacs.d/org-mode ${__dir_win_home}/.emacs.d/org-mode || true
    # fi

    # if [[ -d ${__dir_dotlocal} ]]; then
    #     # create_link ${__dir_dotlocal} ~/.dotfiles.local || true
    #     # create_link ${__dir_dotlocal}/bashrc.local ~/.bashrc.local || true
    #     # create_link ${__dir_dotlocal}/vimrc.local ~/.vimrc.local || true
    #     # create_link ${__dir_dotlocal}/gitconfig.local ~/.gitconfig.local || true
    #     # create_link ${__dir_dotlocal}/emacs.local ~/.emacs.d/mine/.emacs.local || true
    #     # [[ -d "${__dir_win_home}" ]] && create_link -w ${__dir_dotlocal}/emacs.local ${__dir_win_home}/.emacs.d/mine/.emacs.local || true
    # else
    #     loguj -i -t "${ltype}" "Emacs: no local dir."
    # fi

    #Ranger:
    # if hash ranger 2>/dev/null; then
    #     sed -i 's/^set column_ratios 1,5,3$/set column_ratios 1,3,4' ~/.config/ranger/rc.conf
    # fi
    if hash ranger 2>/dev/null; then
        find ~/.config/ranger -type f -not -name 'bookmarks' -not -name 'history' -not -name 'tagged' -exec rm -rf {} \; || true
        ranger --copy-config=all
        # replace rc.conf:
        sed -i 's/^set column_ratios 1,3,4$/set column_ratios 1,5,3/;
        s/^set show_hidden false$/set show_hidden true/;
        s/^set preview_files true$/set preview_files false/
        s/^set preview_files true$/set preview_files false/
        s/^set preview_directories true$/set preview_directories false/' ~/.config/ranger/rc.conf

        # replace rifle.conf:
        sed -i 's/mime \^video,       has mplayer,  X, flag f = mplayer -- "$@"/mime ^video,       has mplayer,  X, flag f = mplayer -fs -softvol -softvol-max 300 -- "$@"/' ~/.config/ranger/rifle.conf

        if [[ -d "${__dir_dotlocal}" ]]; then
            case ${__myos} in
                CYGWIN)
                    if [[ ${__myhost} = W ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.w.cygwin ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dotlocal}/rifle.conf.w.cygwin > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-W)"
                    elif [[ ${__myhost} = H ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.h.cygwin ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dotlocal}/rifle.conf.h.cygwin > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-H)"
                    else
                        # loguj -i -t "${ltype}" "Ranger - cygwin - unknown host Copying default file."
                        cat ~/.config/ranger/rifle.conf ${__dir_dotfiles}/rifle.conf > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-OTHER)"
                    fi
                    ;;
                LINUX)
                    if [[ ${__myhost} = H ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.h.linux ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dotlocal}/rifle.conf.h.linux > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (L-H)"
                    else
                        loguj -i -t "${ltype}" "Ranger - linux - unknown host Copying default file."
                        cat ~/.config/ranger/rifle.conf ${__dir_dotfiles}/rifle.conf > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (L-OTHER)"
                    fi
                    ;;
                *)
                    cat ~/.config/ranger/rifle.conf ${__dir_dotfiles}/rifle.conf > ~/.config/ranger/rifletmp.conf
                    mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                    loguj -i -t "${ltype}" "CP: rifle.conf (OTHER-OTHER)"
                    ;;
            esac
        else
            cat ~/.config/ranger/rifle.conf ${__dir_dotfiles}/rifle.conf > ~/.config/ranger/rifletmp.conf
            mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
            # loguj -i -t "${ltype}" "Ranger - no local dotfiles. Copying default file."
            loguj -i -t "${ltype}" "CP: rifle.conf (default - no local dotfiles)"
        fi
        # if [[ "${__myos}" == "LINUX" ]]; then
        [[ -e ~/.config/ranger/bookmarks ]] &&
            ${__sudo} chown ${__my_user} ~/.config/ranger/bookmarks
        # fi
    else
        loguj -i -t "${ltype}" "Ranger not found. Not creating links."
    fi

    # mplayer
    if hash mplayer 2>/dev/null || [[ -d ~/.mplayer ]]; then
        create_link ${__dir_dotfiles}/mplayer_config ~/.mplayer/config || true
        create_link ${__dir_dotfiles}/mplayer_input.conf ~/.mplayer/input.conf || true
    fi

    # weechat
    if ( hash weechat 2>/dev/null || [[ -d ~/.weechat ]] ) && [[ -d ${__dir_dotlocal} ]]; then
        if [[ -d ${__dir_dotlocal}/weechat ]]; then
           create_link ${__dir_dotlocal}/weechat/guile ~/.weechat/guile || true
           create_link ${__dir_dotlocal}/weechat/javascript ~/.weechat/javascript || true
           create_link ${__dir_dotlocal}/weechat/lua ~/.weechat/lua || true
           create_link ${__dir_dotlocal}/weechat/perl ~/.weechat/perl || true
           create_link ${__dir_dotlocal}/weechat/python ~/.weechat/python || true
           create_link ${__dir_dotlocal}/weechat/ruby ~/.weechat/ruby || true
           create_link ${__dir_dotlocal}/weechat/script ~/.weechat/script || true
           create_link ${__dir_dotlocal}/weechat/tcl ~/.weechat/tcl || true
           create_link ${__dir_dotlocal}/weechat/xfer ~/.weechat/xfer || true
           create_link ${__dir_dotlocal}/weechat/alias.conf ~/.weechat/alias.conf || true
           create_link ${__dir_dotlocal}/weechat/aspell.conf ~/.weechat/aspell.conf || true
           create_link ${__dir_dotlocal}/weechat/buffers.conf ~/.weechat/buffers.conf || true
           create_link ${__dir_dotlocal}/weechat/charset.conf ~/.weechat/charset.conf || true
           create_link ${__dir_dotlocal}/weechat/exec.conf ~/.weechat/exec.conf || true
           create_link ${__dir_dotlocal}/weechat/irc.conf ~/.weechat/irc.conf || true
           create_link ${__dir_dotlocal}/weechat/iset.conf ~/.weechat/iset.conf || true
           create_link ${__dir_dotlocal}/weechat/logger.conf ~/.weechat/logger.conf || true
           create_link ${__dir_dotlocal}/weechat/plugins.conf ~/.weechat/plugins.conf || true
           create_link ${__dir_dotlocal}/weechat/relay.conf ~/.weechat/relay.conf || true
           create_link ${__dir_dotlocal}/weechat/script.conf ~/.weechat/script.conf || true
           create_link ${__dir_dotlocal}/weechat/sec.conf ~/.weechat/sec.conf || true
           create_link ${__dir_dotlocal}/weechat/trigger.conf ~/.weechat/trigger.conf || true
           create_link ${__dir_dotlocal}/weechat/weechat.conf ~/.weechat/weechat.conf || true
           create_link ${__dir_dotlocal}/weechat/xfer.conf ~/.weechat/xfer.conf || true

        else
            loguj -i -t "${ltype}" "No weechat local dotfiles."
        fi
    fi

    # vlc
    if [[ -f "${__dir_dotlocal}/vlcrc" ]]; then
        create_link "${__dir_dotlocal}/vlcrc" "${HOME}/.config/vlc/vlcrc"
    fi

    # vim +PluginInstall +PluginClean +qall
    # if [[ "${__if_update}" == "Y" ]]; then
    #     vim +PlugUpgrade +PlugInstall +PlugUpdate +PlugClean +qall
    # else
    #     vim +PlugInstall +qall
    # fi

    loguj -se -t "${ltype}" "DOTFILES"
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_apps_basic
install_apps()
{
    local ltype="APP"
    local update_option=""
    local sudo_options=""
    [[ "${__myos}" == "LINUX" ]] && sudo_options="-H"

    if [[ "${__if_update}" == "Y" ]]; then
        update_option="-u"
    fi
    if [[ "${__app_lvl}" == "0" ]]; then
        __app_lvl=100
    fi

    # if [[ "${__if_update}" == "Y" && "${__app_lvl}" == "0" ]]; then
    #     update_option="-u" # update only
    # elif [[ "${__if_update}" == "Y" && "${__app_lvl}" != "0" ]]; then
    #     update_option="-U" # update or install if not already installed
    # fi

    loguj -ss -t "${ltype}" "BASICS ${__app_lvl}"
    loguj -i -t "${ltype}" "Update option: ${update_option}"
    # update repos?
    update_repos

    # wget
    (( ${__app_lvl} >= 1 )) &&
        aptget ${update_option} wget && __geturl_app="wget -O" || true

    # curl
    (( ${__app_lvl} >= 1 )) &&
        aptget ${update_option} curl && __geturl_app="curl -Lo" || true

    # git
    (( ${__app_lvl} >= 1 )) &&
        aptget ${update_option} git || true

    (( ${__app_lvl} >= 2 )) &&
        aptget ${update_option} python
        aptget ${update_option} python3
        pipinstall -3H ${update_option} ipdb || true
        pipinstall -H ${update_option} ipdb || true

    # CYGWIN
    if (( ${__app_lvl} >= 1 )) && [[ ${__myos} == 'CYGWIN' ]]; then
        # aptget ${update_option} curl # earlier
        # aptget ${update_option} wget # earlier
        aptget ${update_option} -oc python-setuptools
        aptget ${update_option} -oc python3-setuptools
        aptget ${update_option} -oc cygutils
        aptget ${update_option} -oc cygutils-extra
        aptget ${update_option} -oc ncurses
        aptget ${update_option} -oc procps
        aptget ${update_option} -oc bind-utils
        aptget ${update_option} -oc binutils
        # aptget ${update_option} -oc gnupg # use windows one from Kleopatra
        aptget ${update_option} -oc gcc-g++
        aptget ${update_option} -oc genisoimage
        aptget ${update_option} -oc mkisofs
        aptget ${update_option} -oc p7zip
        aptget ${update_option} -oc rsnapshot
        # aptget ${update_option} gnupg # use windows one from Kleopatra
    fi

    # vim
    __vim_vimplug_url="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    __vim_vimplug_path="${HOME}/.vim/autoload/plug.vim"
    if (( ${__app_lvl} >= 1 )); then
        aptget ${update_option} vim || true

        # del Vundle:
        if [[ -d ~/.vim/bundle/Vundle.vim ]]; then
            loguj -i -t "${ltype}" "Old Vundle present - deleting whole ~/.vim"
            rm -rf ~/.vim
        fi
        # install Plug:
        if [[ ! -e "${__vim_vimplug_path}" ]]; then
            geturl "${__vim_vimplug_url}" "${__vim_vimplug_path}"
            # && loguj -s -t "${ltype}" "Vim plugin 'Plug' installed" \
            # || loguj -e -t "${ltype}" "Vim plugin 'Plug' NOT installed"
        fi
    fi

    # gvim
    if (( ${__app_lvl} >= 1 )) && [[ -d "${__dir_gvim_root}" ]]; then
        if [[ ! -e "${__file_gvim_plug}" ]]; then
            if [[ -r "${__vim_vimplug_path}" ]]; then
                cp "${__vim_vimplug_path}" "${__file_gvim_plug}"
            else
                geturl "${__vim_vimplug_url}" "${__file_gvim_plug}"
            fi
        fi
    fi

    # emacs
    (( ${__app_lvl} >= 1 )) &&
        aptget ${update_option} emacs || true

    # make
    (( ${__app_lvl} >= 1 )) &&
        aptget ${update_option} make || true

    # vim-vundle
    # gitclone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim || true

    # PIP2
    # changelog: https://pip.pypa.io/en/latest/news.html
    if (( ${__app_lvl} >= 1 )); then

        local cur_pip_verson="7.1.2"
        local cur_pip_sha1="4645795f303c2a8a02d9957514af8a28fd8770c2"
        local if_getpip_downloaded="0"
        local installer="/tmp/get-pip.py"
        local cur_python_cmd="python2"
        local cur_pip_cmd="pip2"

        if hash ${cur_python_cmd} 2>/dev/null; then

            if hash ${cur_pip_cmd} 2>/dev/null; then
                # 1. PIP=yes
                if [[ "${__if_update}" == "Y" ]]; then
                    # 1.1 action=update
                    ${__sudo} ${sudo_options} ${cur_pip_cmd} install -U pip
                    loguj -i -t "${ltype}" "UPDATED: ${cur_pip_cmd}"
                else
                    # 1.2 action=install
                    loguj -i -t "${ltype}" "App installed, not updating: ${cur_pip_cmd}"
                fi

            else
                # 2. PIP=no
                if [[ "${__if_update}" == "Y" ]]; then
                    # 2.1 action=update
                    loguj -i -t "${ltype}" "App not installed: ${cur_pip_cmd}"
                else
                    # 2.2 action=install
                    # check czy get-pip.py juz istnieje:
                    if [[ -e "${installer}" ]]; then
                        if checksum "${installer}" -sha1 "${cur_pip_sha1}"; then
                            if_getpip_downloaded=1
                        else
                            rm -rf "${installer}"
                            if_getpip_downloaded=0
                        fi
                    fi

                    # download
                    if [[ "${if_getpip_downloaded}" = "0" ]]; then
                        geturl https://bootstrap.pypa.io/get-pip.py "${installer}" -sha1 "${cur_pip_sha1}" \
                            && if_getpip_downloaded="1"
                    fi

                    # install
                    if [[ "${if_getpip_downloaded}" = "1" ]]; then
                        ${__sudo} ${sudo_options} ${cur_python_cmd} "${installer}" \
                            && loguj -s -t "${ltype}" "${cur_pip_cmd}" \
                            || loguj -e -t "${ltype}" "Problem instalilng ${cur_pip_cmd}"
                    else
                        loguj -e -t "${ltype}" "Problem downloading ${cur_pip_cmd}"
                    fi
                fi

            fi
        fi
    fi

    # PIP3 -----------------------------------
    if (( ${__app_lvl} >= 1 )); then

        cur_python_cmd="python3"
        cur_pip_cmd="pip3"

        if hash ${cur_python_cmd} 2>/dev/null; then

            if hash ${cur_pip_cmd} 2>/dev/null; then
                # 1. PIP=yes
                if [[ "${__if_update}" == "Y" ]]; then
                    # 1.1 action=update
                    ${__sudo} ${sudo_options} ${cur_pip_cmd} install -U pip
                    loguj -i -t "${ltype}" "UPDATED: ${cur_pip_cmd}"
                else
                    # 1.2 action=install
                    loguj -i -t "${ltype}" "App installed, not updating: ${cur_pip_cmd}"
                fi

            else
                # 2. PIP=no
                if [[ "${__if_update}" == "Y" ]]; then
                    # 2.1 action=update
                    loguj -i -t "${ltype}" "App not installed: ${cur_pip_cmd}"
                else
                    # 2.2 action=install
                    # check czy get-pip.py juz istnieje:
                    if [[ -e "${installer}" ]]; then
                        if checksum "${installer}" -sha1 "${cur_pip_sha1}"; then
                            if_getpip_downloaded=1
                        else
                            rm -rf "${installer}"
                            if_getpip_downloaded=0
                        fi
                    fi

                    # download
                    if [[ "${if_getpip_downloaded}" = "0" ]]; then
                        geturl https://bootstrap.pypa.io/get-pip.py "${installer}" -sha1 "${cur_pip_sha1}" \
                            && if_getpip_downloaded="1"
                    fi

                    # install
                    if [[ "${if_getpip_downloaded}" = "1" ]]; then
                        ${__sudo} ${sudo_options} ${cur_python_cmd} "${installer}" \
                            && loguj -s -t "${ltype}" "${cur_pip_cmd}" \
                            || loguj -e -t "${ltype}" "Problem instalilng ${cur_pip_cmd}"
                    else
                        loguj -e -t "${ltype}" "Problem downloading ${cur_pip_cmd}"
                    fi
                fi

            fi
        fi
    fi

    # Python modules
    # if (( ${__app_lvl} >= 1 )); then
    #     pipinstall -3H pyflakes livestreamer
    # fi


    # Ranger
    (( ${__app_lvl} >= 1 )) &&
        gitclone ${update_option} https://github.com/hut/ranger.git ~/apps/ranger "${__sudo} make install" "ranger --copy-config=all" || true

    # TMUX
    (( ${__app_lvl} >= 1 )) &&
        aptget ${update_option} tmux || true

    # dtrx
    # without updating
    if (( ${__app_lvl} >= 1 )); then
        if ! hash dtrx 2>/dev/null; then
            rm -rf /tmp/dtrx-7.1
            geturl -d http://brettcsmith.org/2007/dtrx/dtrx-7.1.tar.gz /tmp/dtrx-7.1.tar.gz -sha1 05cfe705a04a8b84571b0a5647cd2648720791a4 "tar -xf dtrx-7.1.tar.gz" "cd dtrx-7.1" "${__sudo} python setup.py install --prefix=/usr/local" "rm -rf /tmp/dtrx-7.1" "rm -rf /tmp/dtrx-7.1.tar.gz" || true
        fi
    fi

    # fasd
    (( ${__app_lvl} >= 1 )) &&
        gitclone ${update_option} https://github.com/clvv/fasd.git ~/apps/fasd "${__sudo} make install" || true

    # commacd
    (( ${__app_lvl} >= 2 )) &&
        geturl ${update_option} https://raw.githubusercontent.com/shyiko/commacd/master/commacd.bash ~/.commacd.bash || true

    # glances
    if (( ${__app_lvl} >= 2 )); then
        aptget -ol ${update_option} glances &&
            {
                aptget ${update_option} lm-sensors || true
                pipinstall -2H ${update_option} PySensors || true
            } ||
            true
    fi

    # fzf - asks questions
    (( ${__app_lvl} >= 2 )) &&
        gitclone -p 1 ${update_option} https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install || true

    if (( ${__app_lvl} >= 2 )); then
        pipinstall -2H ${update_option} speedtest-cli || true
        if ! hash youtube-dl 2>/dev/null; then
            pipinstall -3H ${update_option} youtube_dl youtube-dl
        fi
    fi
        # if [[ -d ~/.fzf && "${__if_update}" == "N" ]]; then
        # elif [[ -d ~/.fzf && "${__if_update}" == "Y" ]]; then
        #     gitclone ${update_option} https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install || true
        # elif

        #     gitclone -p 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install || true
        # elif [[ "${__if_update}" == "Y" ]]; then
        #     # update
        # fi

    # if [[ "${__if_update}" == "Y" ]]; then
    #     if [[ -d ~/.fzf ]]; then
    #         cd ~/.fzf
    #         git up
    #     else

    #     fi

    # elif (( ${__app_lvl} >= 2 )); then
    #     if [[ ! -d ~/.fzf ]]; then
    #         git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install || true
    #     fi
    # fi


    # Spacemacs
    if (( ${__app_lvl} >= 4 )) && [[ -z "${update_option}" ]]; then

        git clone --recursive https://github.com/syl20bnr/spacemacs "${HOME}/.emacs.d"


        local file="${HOME}/.emacs"
        if [[ -e "${file}" ]]; then
            mv "${file}" "${file}.old"
        fi

        local file="${HOME}/.emacs.local"
        if [[ -e "${file}" ]]; then
            mv "${file}" "${file}.old"
        fi

    fi

    # Emacs Linux - old
    # if (( ${__app_lvl} >= 3 )); then
    #     aptget ${update_option} emacs || true
    #     if hash emacs 2>/dev/null; then
    #         # evil-leader:
    #         geturl https://raw.githubusercontent.com/cofi/evil-leader/master/evil-leader.el ~/.emacs.d/mine/evil-leader.el -sha1 00c336e55307dbcb3f73f47b1d9a1d759404341d || true
    #         # key-chord:
    #         geturl http://www.emacswiki.org/emacs/download/key-chord.el ~/.emacs.d/mine/key-chord.el -sha1 2da61bf970ca332c4de96c1977fc7e326df6c33a || true
    #         # evil:
    #         gitclone ${update_option} https://gitorious.org/evil/evil.git ~/.emacs.d/evil ||
    #             {
    #                 loguj -i -t "${ltype}" "Manually downloading evil.git"
    #                 rm -rf ~/.emacs.d/evil
    #                 rm -rf ~/.emacs.d/lyro-evil*
    #                 cd ~/.emacs.d
    #                 if [[ ! -f evil-default.zip ]]; then
    #                     ${__geturl_app} evil-default.zip https://bitbucket.org/lyro/evil/get/default.zip &&
    #                         {
    #                             unzip evil-default.zip
    #                             mv ~/.emacs.d/lyro-evil* evil
    #                             rm ~/.emacs.d/evil-default.zip
    #                             loguj -d -t "${ltype}" "evil"
    #                             loguj -e -t "${ltype}" "Evil downloaded manually."
    #                         } ||
    #                             {
    #                                 loguj -e -t "${ltype}" "Downloading evil.git (default.zip)"
    #                             }
    #                         fi
    #                     }
    #                     # org-mode:
    #                     gitclone git://orgmode.org/org-mode.git ~/.emacs.d/org-mode "git checkout -b stable origin/maint" "git pull" "make autoloads" || true
    #                 fi
    #             fi

    # geeknote
    (( ${__app_lvl} >= 3 )) &&
        if ! hash geeknote 2> /dev/null; then
            gitclone ${update_option} https://github.com/VitaliyRodnenko/geeknote.git ~/apps/geeknote || true
            ${__sudo} python setup.py install
            geeknote settings --editor vim
        fi

    # PIP installs
    if (( ${__app_lvl} >= 3 )); then
        #ipythons
        pipinstall -H ${update_option} ipython || true
        pipinstall -3H ${update_option} ipython || true
        # BeautifulSoup4
        pipinstall -3H ${update_option} BeautifulSoup4 || true
        # flake8
        pipinstall -3H ${update_option} flake8 || true
        # bashate
        pipinstall -3H ${update_option} bashate || true
        # httpie
        pipinstall -H ${update_option} httpie || true
        # gitcheck
        pipinstall -3H git+git://github.com/badele/gitcheck.git gitcheck
        # livestreamer
        pipinstall -3H ${update_option} livestreamer
    fi

    # different for LINUX
    if [[ ${__myos} == "LINUX" ]] && (( ${__app_lvl} >= 3 )); then
        aptget -ol ${update_option} sshfs
        aptget -ol ${update_option} vlc
        aptget -ol ${update_option} dos2unix
        aptget -ol ${update_option} mplayer
        aptget -ol ${update_option} mediainfo
        aptget -ol ${update_option} lame
        aptget -ol ${update_option} krdc
        aptget -ol ${update_option} vpnc
        aptget -ol ${update_option} openvpn
        aptget -ol ${update_option} tidy
        aptget -ol ${update_option} iconv
        aptget -ol ${update_option} steam
        aptget -ol ${update_option} nethogs
        aptget -ol ${update_option} iftop
        aptget -ol ${update_option} nload
        aptget -ol ${update_option} xclip
        aptget -ol ${update_option} ppa-purge
        aptget -ol ${update_option} apt-file
        aptget -ol ${update_option} autokey-gtk
        aptget -ol ${update_option} pandoc
        # pv - see progress through a pipeline
        aptget -ol ${update_option} pv
        aptget -ol ${update_option} traceroute
        apt-file update
        # calibre:
        sudo -v && wget -nv -O-
        https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py \
            | sudo python -c "import sys; main=lambda:sys.stderr.write('Download failed\n'); exec(sys.stdin.read()); main()"
    fi

    # different for LINUX
    if (( ${__app_lvl} >= 3 )) && [[ "${__myos}" == 'LINUX' ]]; then
        # download installers
        [[ ! -d "${__dir_installers}" ]] && mkdir "${__dir_installers}"

        # Teamviewer Full Version - Ubuntu/Debian
        local url="https://download.teamviewer.com/download/teamviewer_i386.deb"
        geturl "${url}" "${__dir_installers}/${url##*/}"

        # ffmpeg - x64 linux static builds (NOT ubuntu/debian)
        local url="http://johnvansickle.com/ffmpeg/builds/ffmpeg-git-64bit-static.tar.xz"
        geturl "${url}" "${__dir_installers}/${url##*/}"

        loguj -i -t "${ltype}" "INSTALLERS DOWNLOADED - run them manually"
        if hash xdg-open 2>/dev/null; then
            xdg-open "${__dir_installers}"
        elif hash cygstart 2>/dev/null; then
            cygstart "${__dir_installers}"
        fi
    fi

    if [[ "${__if_update}" == "Y" ]]; then
        if hash apt-get 2>/dev/null; then
            ${__sudo} sudo apt-get update
            ${__sudo} sudo apt-get -y upgrade
            ${__sudo} sudo apt-get -fy install
            ${__sudo} sudo apt-get -y autoremove
            ${__sudo} sudo apt-get -y autoclean
            ${__sudo} sudo apt-get -y clean
        elif hash babun 2>/dev/null; then
            babun update
        fi
    fi
    loguj -se -t "${ltype}" "BASICS ${__app_lvl}"
    return 0
}



# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

testing()
{
    echo "=== TESTING START =================================================="
    echo "install git test"

        local cur_pip_verson="7.1.2"
        local cur_pip_sha1="4645795f303c2a8a02d9957514af8a28fd8770c2"
        local if_getpip_downloaded="0"
        local installer="/tmp/get-pip.py"
        local cur_python_cmd="python2"
        local cur_pip_cmd="pip2"

        cur_python_cmd="python3"
        cur_pip_cmd="pip3"


        local installer="/tmp/get-pip.py"

                    # download
                        geturl https://bootstrap.pypa.io/get-pip.py "${installer}" -sha1 "${cur_pip_sha1}" \
                            && if_getpip_downloaded="1"

                    # install
                        ${__sudo} ${sudo_options} ${cur_python_cmd} "${installer}" \
                            && loguj -s -t "${ltype}" "${cur_pip_cmd}" \
                            || loguj -e -t "${ltype}" "Problem instalilng ${cur_pip_cmd}"

    echo "=== TESTING END ===================================================="
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

create_link ${__dir_dotfiles} ~/.dotfiles
create_link ${__dir_dotlocal} ~/.dotfiles.local || true

[[ ${__if_testing} == "Y" ]] && testing
if (( ${__app_lvl} > 0 )) || [[ "${__if_update}" == "Y" ]]; then
    install_apps
fi

[[ ${__if_dotfiles} == "Y" ]] && install_dotfiles

# [[ ${__if_dotfiles} == "Y" ]] && install_dotfiles
[[ ${__if_break_links} == "Y" ]] && break_links

display_log_info
display_log_error

# cd "${__dir_dotfiles}"
# git st
# git remote show origin

exit

