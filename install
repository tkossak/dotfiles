#!/usr/bin/env bash

# TODO: force update (new switch) - delete apps and reinstall them
# TODO: add checking sha1sum to curlinstall()
# TODO: gitclone -update = cd into dir and run git pull

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
# __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
# __base="$(basename ${__file} .sh)"
# __root="$(cd "$(dirname "${__dir}")" && pwd)"

# magic variables for links
__file="$(readlink -f ${BASH_SOURCE[0]})"
__dir="$(cd "$(dirname "${__file}")" && pwd)"

# arg1="${1:-}"

__myos="$(uname)"
__myhost="$(uname -n)"
__dir_dlocal="$(cd "$(dirname "${__dir}")" && pwd)/dotfiles.local"
__dir_dlocal="$(readlink -f ${__dir_dlocal})"
hash cygpath 2>/dev/null &&
    __win_appdata="$(cygpath -au ${APPDATA:-})" || __win_appdata=""
hash sudo 2>/dev/null &&
    __sudo="sudo" ||
    __sudo=""
__errors=()

#Initial cmds:
mkdir -p ~/apps
mkdir -p ~/.emacs.d/mine
[[ -d ${__win_appdata} ]] &&
    mkdir -p ${__win_appdata}/.emacs.d/mine
find ${__dir}/bin -type f -not -name 'create_bash.model' -exec chmod +x {} \;
find ${__dir} -maxdepth 1 -type f -not -name 'install' -exec chmod -x {} \;

# --------------------------------------------------------------------------------
# create_link
# $1 = OPTIONAL
#    = if -w then create windows hard link
#    = if -c then cp instead of creating link
#    = otherwise create linux soft link
#    = can be EMPTY
# $2 = source file
# $3 = destination = link path/link
create_link()
{
    local parse_params="Y"
    local link_type="LINUX"
    local if_backup="Y"
    while [[ ${parse_params} = "Y" ]]; do
        case $1 in
            -w) link_type="WIN HARD"
                shift
                ;;
            -c) link_type="CP"
                shift
                ;;
            -n) if_backup="N"
                shift
                ;;
            *) parse_params="N"
                ;;
        esac
    done

    local src_file="${1:?\$1 not set}"
    local dst_file="${2:?\$2 not set}"

    # check if src exists:
    if [[ ! -e "${src_file}" ]]; then
        echo "===[L] ERROR: Src file ${src_file} does not exists."
        __errors+=("[L] ERROR: Src file ${src_file} does not exists.")
        return 0
    fi
    src_file="$(readlink -f ${src_file})"

    # check if parent directory of dst exists:
    if [[ ! -d "$(cd "$(dirname "${dst_file}")" && pwd)" ]]; then
        echo "[L] Parent directory of ${dst_file} does not exists."
        __errors+=("[L] Parent directory of ${dst_file} does not exists.")
        return 0
    fi

    # dst_file="$(readlink -f ${dst_file})"

    # remove dst if it's a link
    if [[ -L "${dst_file}" ]]; then
        rm "${dst_file}"
    fi

    # echo "${src_file}"
    # echo "${dst_file}"

    # backup dst
    if [[ -f ${dst_file} && ! -L ${dst_file} ]]; then
        if [[ ${if_backup} = "Y" ]]; then
            echo "===[L] Backup ${dst_file}.old"
            mv "${dst_file}" "${dst_file}.old"
        else
            rm -rf "${dst_file}"
        fi
    fi

    # create link
    if [[ $link_type = "WIN HARD" ]]; then
        echo "===[L] LINK Windows ---${dst_file}--- to ---${src_file}---... "
        if [[ -d ${src_file} ]]; then
            cmd /c mklink /J "$(cygpath -aw ${dst_file})" "$(cygpath -aw ${src_file})"
        else
            cmd /c mklink /H "$(cygpath -aw ${dst_file})" "$(cygpath -aw ${src_file})"
        fi
    elif [[ $link_type = "CP" ]]; then
        echo -n "===[L] COPY ${dst_file} ---to--- ${src_file} ---... "
        cp "${src_file}" "${dst_file}"
    elif [[ $link_type = "LINUX" ]]; then
        echo -n "===[L] LINK Linux ${dst_file} ---to--- ${src_file} ---... "
        ln -s "${src_file}" "${dst_file}"
    else
        echo "===[L] ERROR: bledny link_type: ${link_type}"
        __errors+=("[L] ERROR: bledny link_type: ${link_type}")
    fi &&
    {
        echo "===[L] Done."
    } ||
    {
        echo $'\n'"===[L] ERROR! ================================"
        __errors+=("[L] ERROR: creating link ${src_file}")
    }

}

# --------------------------------------------------------------------------------
# aptget
# $1 = app name to install (passed to apt-get)
# $2 = app name to check if it's installed already
aptget()
{
    local instal_cmd="${__sudo} "
    # local app_install="${1:-}"
    local app_install="${1:?Error: app name not set}"
    local app_run="${2:-${1}}"

    # check if app is installed
    if hash ${app_run} 2>/dev/null; then
        echo "===[A] ${app_run} already installed."
        return 0
    fi

    # build instal command
    # add sudo
    # instal_cmd="${instal_cmd}sudo "

    # add apt-get
    if hash apt-get 2>/dev/null; then
        instal_cmd="${instal_cmd}apt-get install -qyf "
    else
        echo "===[A] Error: no apt-get tool?"
        __errors+=("[A] ERROR: no apt-get tool?")
        return 1
    fi

    instal_cmd="${instal_cmd}${app_install}"
    echo "===[A] Installing: ${instal_cmd}..."
    ${instal_cmd}
    echo "===[A] Done."
}


# --------------------------------------------------------------------------------
# gitclone
# $1  = git url to clone
# $2  = git folder to clone to
# $3- = script to run after cloning
gitclone()
{
    local giturl="${1:?Error: Git url not set}"
    local gitfolder="${2:?Error: Git folder not set}"
    shift
    shift
    local gitrun=("$@")

    if [[ -d ${gitfolder} ]]; then
        echo "===[G] folder already exists: ${gitfolder}"
        return 0
    fi
    echo "===[G] git clone ${giturl} ${gitfolder}==="
    git clone "${giturl}" "${gitfolder}" ||
    {
        echo "===[G] Git clone exited with Error: ${giturl} ${gitfolder}"
        __errors+=("[G] Git clone exited with Error: ${giturl} ${gitfolder}")
        return 0
    }

    cd ${gitfolder}
    for run in "${gitrun[@]:-}" ; do
        echo "===[G] run ${run}"
        ${run}
    done

}


# --------------------------------------------------------------------------------
# geturl
# $1 = options
#      -u  :: update (delete the file/folder and redownload it)
# $1 = url to download
# $2 = filename to save as

geturl()
{
    local update=""
    local url
    local file
    while [[ $# > 0 ]]; do
        case "$1" in
            -u)
                shift
                update="Y"
                ;;
            *)
                break;
                ;;
        esac
    done
    url="${1}"
    file="${2}"
    tmpfile="${file}#.#"

    # [[ ! -z "${file}" ]] && file="-o ${file}"

    if [[ "${update}" = "Y" ]]; then
        mv "${file}" "${tmpfile}"
    elif [[ -e ${file} ]]; then
        echo "===[U] File/dir already exists: ${file}"
        return 0
    fi

    echo "===[U] Downloading ${url}..."
    curl -o ${file} ${url} \
        ||
        {
            echo "===[U] ERROR downloading file."
            __errors+=("[U] ERROR downloading file: ${url}")
            mv ${tmpfile} ${file}
        } \
        &&
        {
            echo "===[U] Done."
            if [[ "${update}" = "Y" ]]; then
                rm -rf "${tmpfile}"
            fi
        }

}


# --------------------------------------------------------------------------------
# pipinstall
# $1 = options
#      -2  :: pip2
#      -3  :: pip3
#      -u  :: update
# $1 = app name to install
pipinstall()
{
    local pip="pip"
    local update=""
    local cmdinstall=""
    while [[ $# > 0 ]]; do
        case "$1" in
            -2)
                shift
                pip="pip2"
                ;;
            -3)
                shift
                pip="pip3"
                ;;
            -u)
                shift
                update="-U"
                ;;
            *)
                break;
                ;;
        esac
    done
    cmdinstall="${1}"

    if ${pip} -q show ${cmdinstall}; then # app is installed
        if [[ -z "${update}" ]]; then
            echo "===[P] app already installed: ${cmdinstall}"
            return 0
        fi
    fi
    echo "===[P] installing ${cmdinstall}..."
    ${__sudo} ${pip} install ${update} ${cmdinstall} \
        && echo "===[P] Done." \
        ||
        {
            echo "===[P] ERROR."
            __errors+=("[P] ERROR: ${__sudo} ${pip} install ${update} ${cmdinstall}")
        }
}


# --------------------------------------------------------------------------------
# break_links()
break_links()
{
    echo "===<<< BREAKING LINKS >>>==="
    for link in ~/.tmux.conf ~/.vimrc ~/.vimrc.local ~/.bashrc ~/.bashrc.local ~/.emacs ~/.emacs.d/mine/.emacs.local ~/.gitconfig ~/.gitconfig.local ~/.config/ranger/rc.conf ~/.config/ranger/rifle.conf; do
        if [[ -L "$link" ]]; then
            echo -n "${link}..."
            cp --remove-destination "$(readlink ${link})" ${link}
            echo " Done."
        else
            echo "Not a link: ${link}"
        fi
    done
    echo "===<<< DONE BREAKING LINKS >>>==="
}

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_dotfiles
install_dotfiles()
{
    echo "===<<< INSTALLING DOTFILES >>>==="

    # Folders:
    create_link ${__dir} ~/.dotfiles
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal} ~/.dotfiles.local
    chmod -x ~/.dotfiles.local/*

    # TMUX
    create_link ${__dir}/tmux.conf ~/.tmux.conf

    # Git
    create_link ${__dir}/gitconfig ~/.gitconfig
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/gitconfig.local ~/.gitconfig.local

    # Bash:
    create_link ${__dir}/bashrc ~/.bashrc
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/bashrc.local ~/.bashrc.local


    # Vim
    create_link ${__dir}/vimrc ~/.vimrc
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/vimrc.local ~/.vimrc.local

    # Emacs Linux:
    create_link ${__dir}/emacs ~/.emacs
    [[ -d ${__dir_dlocal} ]] && create_link ${__dir_dlocal}/emacs.local ~/.emacs.d/mine/.emacs.local
    geturl https://raw.githubusercontent.com/cofi/evil-leader/master/evil-leader.el ~/.emacs.d/mine/evil-leader.el
    geturl http://www.emacswiki.org/emacs/download/key-chord.el ~/.emacs.d/mine/key-chord.el
    gitclone https://gitorious.org/evil/evil.git ~/.emacs.d/evil
    gitclone git://orgmode.org/org-mode.git ~/.emacs.d/org-mode "make autoloads"

    # Emacs Win:
    if [[ -d ${__win_appdata} ]]; then
        create_link -w -n ${__dir}/emacs ${__win_appdata}/.emacs
        [[ -d ${__dir_dlocal} ]] && create_link -w -n ${__dir_dlocal}/emacs.local ${__win_appdata}/.emacs.d/mine/.emacs.local
        create_link -w -n ~/.emacs.d/mine/evil-leader.el ${__win_appdata}/.emacs.d/mine/evil-leader.el
        create_link -w -n ~/.emacs.d/mine/key-chord.el ${__win_appdata}/.emacs.d/mine/key-chord.el
        create_link -w -n ~/.emacs.d/evil ${__win_appdata}/.emacs.d/evil
        create_link -w -n ~/.emacs.d/org-mode ${__win_appdata}/.emacs.d/org-mode
    fi

    # Emacs local files Linux + Win
    if [[ -d ${__dir_dlocal} ]]; then
        create_link ${__dir_dlocal} ~/.dotfiles.local
        create_link ${__dir_dlocal}/bashrc.local ~/.bashrc.local
        create_link ${__dir_dlocal}/vimrc.local ~/.vimrc.local
        create_link ${__dir_dlocal}/gitconfig.local ~/.gitconfig.local
        create_link ${__dir_dlocal}/emacs.local ~/.emacs.d/mine/.emacs.local
        [[ -d ${__win_appdata} ]] && create_link -w -n ${__dir_dlocal}/emacs.local ${__win_appdata}/.emacs.d/mine/.emacs.local
    else
        echo "===Error: local dir does not exist=${__dir_dlocal}"
        __errors+=("ERROR: local dir does not exist=${__dir_dlocal}")
    fi

    #Ranger:
    # if hash ranger 2>/dev/null; then
    #     sed -i 's/^set column_ratios 1,5,3$/set column_ratios 1,3,4' ~/.config/ranger/rc.conf
    # fi
    if hash ranger 2>/dev/null; then
        find ~/.config/ranger -type f -not -name 'bookmarks' -not -name 'history' -not -name 'tagged' -exec rm -rf {} \;
        ranger --copy-config=all
        sed -i 's/^set column_ratios 1,3,4$/set column_ratios 1,5,3/;
        s/^set show_hidden false$/set show_hidden true/;
        s/^set preview_files true$/set preview_files false/
        s/^set preview_files true$/set preview_files false/
        s/^set preview_directories true$/set preview_directories false/' ~/.config/ranger/rc.conf


        if [[ -d "${__dir_dlocal}" ]]; then
            case ${__myos} in
                CYGWIN*)
                    if [[ ${__myhost} = AWA* ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.work.cygwin ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dlocal}/rifle.conf.work.cygwin > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                    elif [[ ${__myhost} = HEAVEN ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.home.cygwin ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dlocal}/rifle.conf.home.cygwin > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                    fi
                    ;;
                Linux)
                    if [[ ${__myhost} = LMQ ]]; then
                        # create_link ~/.dotfiles.local/rifle.conf.home.linux ~/.config/ranger/rifle.conf
                        cat ~/.config/ranger/rifle.conf ${__dir_dlocal}/rifle.conf.home.linux > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                    fi
                    ;;
                *)
                    echo "Unknown os: copying default rifle.conf"
                    __errors+=("Unknown os: copying default rifle.conf")
                    cat ~/.config/ranger/rifle.conf ${__dir}/rifle.conf > ~/.config/ranger/rifletmp.conf
                    mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                    ;;
            esac
        fi
    else
        echo "===Ranger folder not found. Not creating links."
        __errors+=("Ranger folder not found. Not creating links.")
    fi

    vim +PluginInstall +PluginClean +qall

    echo "===<<< DONE INSTALLING DOTFILES >>>==="

}

# -------------------------------------------------------
# install_basics
install_basics()
{

    echo "===<<< INSTALLING BASICS >>>==="

    # update repositories
    if hash apt-get 2>/dev/null; then
        ${__sudo} apt-get update
    fi

    break_links

    # Basic
    aptget git
    aptget vim
    aptget make
    gitclone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    aptget python-pip pip
    aptget python3-pip pip3

    # fasd
    gitclone https://github.com/clvv/fasd.git ~/apps/fasd "${__sudo} make install"

    # commacd
    geturl https://raw.githubusercontent.com/shyiko/commacd/master/commacd.bash ~/.commacd.bash

    # fzf
    if [[ ! -d ~/.fzf ]]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install
    fi

    # Ranger
    # rm -rf ~/apps/ranger ~/.config/ranger
    gitclone https://github.com/hut/ranger.git ~/apps/ranger "${__sudo} make install" "ranger --copy-config=all"

    # TMUX
    aptget tmux

    # Emacs
    aptget emacs

    #Reszta
    aptget curl
    aptget wget
    pipinstall -3 BeautifulSoup4
    pipinstall -3 flake8
    pipinstall -3 bashate
    pipinstall -2 speedtest-cli
    pipinstall httpie
    aptget dtrx

    gitclone https://github.com/VitaliyRodnenko/geeknote.git ~/apps/geeknote "${__sudo} python setup.py install" "geeknote settings --editor vim"
    # geeknote login
    echo "===<<< DONE INSTALLING BASICS >>>==="

}

# -------------------------------------------------------
# -------------------------------------------------------
# -------------------------------------------------------


if_dotfiles="N"
if_basics="N"
if_break_links="N"

[[ $# = 0 ]] && if_dotfiles="Y"

while [[ $# > 0 ]]; do
    case "$1" in
        -h|--help)
            echo "CLI options:"
            echo "  -d  :: install dotfiles"
            echo "  -b  :: install basic apps"
            echo "  -a  :: install all/everything"
            echo "  -bl :: break links"
            exit 0
            ;;
        -d)
            shift
            if_dotfiles="Y"
            ;;
        -b)
            shift
            if_basics="Y"
            ;;
        -bl)
            shift
            if_break_links="Y"
            ;;
        -a)
            shift
            if_dotfiles="Y"
            if_basics="Y"
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

[[ ${if_break_links} = "Y" ]] && break_links
[[ ${if_basics} = "Y" ]] && install_basics
[[ ${if_dotfiles} = "Y" ]] && install_dotfiles

# display errors
if [[ ${#__errors[@]} > 0 ]]; then
    echo "=== ERRORS ==="
    for err in "${__errors[@]}"; do
        echo ${err}
    done
else
    echo "Done. No Errors"
fi

