#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# --------------------------------------------------------------------------------
# magic variables for links
__sfile="$(readlink -f "${BASH_SOURCE[0]}")"
__dir_dotfiles="$(cd "$(dirname "${__sfile}")" && pwd)"
__dir_dotfiles_new="$(cd "$(dirname "${__sfile}")"/dotfiles && pwd)"
# __dir_dotlocal="$(cd "$(dirname "${__dir_dotfiles}")" && pwd)/dotfiles.local"
# __dir_dotlocal="$(readlink -f "${__dir_dotlocal}")"
# __dir_dotlocal="$(readlink -f "$HOME/.dotfiles.local")"
__dir_dotlocal="$HOME/.dotfiles.local"

source "${__dir_dotfiles}/source/src_bash_functions"
source "${__dir_dotfiles}/source/src_bash_vars"

if [[ $# = 0 ]]; then
    print_help
    exit 0
fi

while getopts ":hldt" opt; do
    case "$opt" in
        h)
            print_help
            exit 0
            ;;
        l)
            __if_break_links="Y"
            ;;
        d)
            __if_dotfiles="Y"
            ;;
        t)
            __if_testing="Y"
            ;;
        \?)
            loguj -e -t "${ltype}" "Unknown option: $1"
            print_help
            exit 1
            ;;
        :)
            loguj -e -t "${ltype}" "Option -${OPTARG} requires an argument."
            print_help
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))
OPTIND=1

# ================================================================================
# print environment
echo -en "${Yellow}=== ENVIRONMENT ==================================================${Color_Off}\n"
echo "__dir_dotfiles=${__dir_dotfiles}"
if [[ -d "${__dir_dotlocal}" ]]; then
    echo "__dir_dotlocal (exists) =${__dir_dotlocal}"
else
    echo "__dir_dotlocal (NOT exists) =${__dir_dotlocal}"
fi
if [[ -d "${__dir_win_home}" ]]; then
    echo "__dir_win_home (exists) =${__dir_win_home}"
else
    echo "__dir_win_home (NOT exists) =${__dir_win_home}"
fi
echo "__myos=${__myos}"
echo "__myosdist=${__myosdist}"
echo "__myhost=${__myhost}"
echo "__dir_gvim_root=${__dir_gvim_root}"
echo "__dir_gvim_home=${__dir_gvim_home:-}"
echo "__dir_gvimplug_path=${__dir_gvimplug_path:-}"
echo "=== END OF VARS ==========================================="
# ================================================================================
# Initial cmds:
loguj -p -i -t "${ltype}" "Initial cmds..."
mkdir -p "${HOME}/apps"
mkdir -p "${HOME}/.vim/autoload"
if [[ -d "${__dir_dotlocal}" ]]; then
    find "${__dir_dotlocal}" -maxdepth 1 -type f -exec chmod -x {} \; || true
fi
find "${__dir_dotfiles}/bin" -type f -exec chmod u+x {} \;
chmod -x "${__dir_dotfiles}/bin/create_bash.model"

find "${__dir_dotfiles}" -maxdepth 1 -type f -exec chmod -x {} \;
[[ -e "${__dir_dotfiles}/install" ]] && chmod u+x "${__dir_dotfiles}/install"
[[ -e "${__dir_dotfiles}/i_git" ]] && chmod u+x "${__dir_dotfiles}/i_git"

loguj -p -i -t "${ltype}" "Initial cmds... Done"

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# break_links()
break_links()
{
    local ltype="BRK"
    local src
    loguj -ss -t "${ltype}" "BREAKING LINKS"
    for link in ~/.tmux.conf ~/.gitconfig ~/.gitconfig.local \
        ~/.vimrc ~/.vimrc.local ~/.vimrc.plugins ~/.vimrc.functions \
        ~/.weechat/guile ~/.weechat/javascript ~/.weechat/lua ~/.weechat/perl ~/.weechat/python ~/.weechat/ruby ~/.weechat/script ~/.weechat/tcl ~/.weechat/xfer ~/.weechat/alias.conf ~/.weechat/aspell.conf ~/.weechat/buffers.conf ~/.weechat/charset.conf ~/.weechat/exec.conf ~/.weechat/irc.conf ~/.weechat/iset.conf ~/.weechat/logger.conf ~/.weechat/plugins.conf ~/.weechat/relay.conf ~/.weechat/script.conf ~/.weechat/sec.conf ~/.weechat/trigger.conf ~/.weechat/weechat.conf ~/.weechat/xfer.conf \
        ~/.config/ranger/rc.conf ~/.config/ranger/rifle.conf ~/.gconf/apps/gnome-terminal ~/.config/vlc/vlcrc \
        ~/.minttyrc \
        ~/.spacemacs \
        ~/.config/nvim/UltiSnips
    do
        if [[ -e "${link}" ]]; then
            src="$(readlink -f ${link})"
        else
            src=""
            loguj -i -t "${ltype}" "Dst file does not exist: ${link}"
            continue
        fi

        if [[ ! -L "${link}" ]]; then
           loguj -i -t "${ltype}" "Not a link: ${link}"
        elif [[ -n "${src}" && ! -r ${src} ]]; then
            loguj -e -t "${ltype}" "Src file is not readable! (${src})"
        elif [[ -L "$link" ]]; then
            rm -rf "${link}"
            cp -r "${src}" ${link}
            loguj -i -t "${ltype}" "UNLINKED: ${link}"
        else
            loguj -e -t "${ltype}" "Unknown case"
        fi
    done
    loguj -se -t "${ltype}" "BREAKING LINKS"
    return 0
}

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# install_dotfiles
install_dotfiles()
{
    local ltype="DOT"
    local src
    loguj -ss -t "${ltype}" "DOTFILES"

    # TMUX
    install_link "${__dir_dotfiles_new}/tmux.conf_2.9" ~/.tmux.conf || true

    # Joplin:
    if [[ -d "$HOME/.config/joplin" ]]; then
        install_link "${__dir_dotfiles_new}/joplin.keymap.json" ~/.config/joplin/keymap.json || true
    fi

    # minttyrc
    if [[ "${__myos}" == "CYGWIN" ]]; then
        install_link "${__dir_dotfiles_new}/minttyrc" ~/.minttyrc || true
    fi

    # asdf: remove unwanted shims:
    if [[ -d "$HOME/.asdf/shims" ]]; then
        for app in 'powerline*' xz sqlite3 xmllint iconv envsubst clear gettext gettext.sh tput envsubst pandoc pipx bsdtar reset zstd bzip2;
        do
            find ~/.asdf/shims -name "$app" -delete
        done
    fi

    # fish:
    fish_functions_src_dirs=("${__dir_dotfiles}/fish_functions/*.fish" "${__dir_dotlocal}/fish_functions/*.fish")
    fish_config_base="$HOME/.config/fish"
    fish_functions_dest_dir="$fish_config_base/functions"
    if [[ -d "$fish_config_base" ]]; then
        if [[ ! -d "$fish_functions_dest_dir" ]]; then
            mkdir "$fish_functions_dest_dir"
        fi
        for file in ${__dir_dotfiles}/fish_functions/*.fish; do
            install_link "$file" "$fish_functions_dest_dir/$(basename $file)" || true
        done
        for file in ${__dir_dotlocal}/fish_functions/*.fish; do
            install_link "$file" "$fish_functions_dest_dir/$(basename $file)" || true
        done
        install_link "${__dir_dotfiles_new}/config.fish" "$fish_config_base/config.fish"
    else
        echo "$fish_config_base does not exits"
    fi

    # Git
    install_link "${__dir_dotfiles_new}/gitconfig" ~/.gitconfig || true
    install_link -n "${__dir_dotlocal}/gitconfig.local" ~/.gitconfig.local || true
    if hash vimdiff 2>/dev/null; then
        git config --global diff.tool vimdiff
        # git config --global difftool.vimdiff.path "/usr/bin/vimdiff"
        git config --global difftool.prompt false

        git config --global merge.tool vimdiff
        # git config --global mergetool.vimdiff.path "/usr/bin/vimdiff"
        git config --global mergetool.prompt false
    fi
    if hash p4merge 2>/dev/null; then
        git config --global diff.tool p4merge
        # git config --global difftool.p4merge.path "/opt/p4merge/bin/p4merge"
        git config --global difftool.prompt false

        git config --global merge.tool p4merge
        # git config --global mergetool.p4merge.path "/opt/p4merge/bin/p4merge"
        git config --global mergetool.prompt false
    elif hash /opt/p4merge/bin/p4merge; then
        git config --global diff.tool p4merge
        git config --global difftool.p4merge.path "/opt/p4merge/bin/p4merge"
        git config --global difftool.prompt false

        git config --global merge.tool p4merge
        git config --global mergetool.p4merge.path "/opt/p4merge/bin/p4merge"
        git config --global mergetool.prompt false
    elif hash "${HOME}/apps/p4merge/bin/p4merge"; then
        git config --global diff.tool p4merge
        git config --global difftool.p4merge.path "${HOME}/apps/p4merge/bin/p4merge"
        git config --global difftool.prompt false

        git config --global merge.tool p4merge
        git config --global mergetool.p4merge.path "${HOME}/apps/p4merge/bin/p4merge"
        git config --global mergetool.prompt false
    fi

    # Bash:
    # install_link "${__dir_dotfiles_new}/bashrc" ~/.bashrc || true
    # install_link -n "${__dir_dotlocal}/bashrc.local" ~/.bashrc.local || true

    # Vim
    install_link "${__dir_dotfiles_new}/vimrc" ~/.vimrc || true
    install_link -n "${__dir_dotlocal}/vimrc.local" ~/.vimrc.local || true
    install_link "${__dir_dotfiles_new}/vimrc.plugins" ~/.vimrc.plugins || true
    install_link "${__dir_dotfiles_new}/vimrc.functions" ~/.vimrc.functions || true
    install_link -n "${__dir_dotlocal}/UltiSnips" ~/.vim/UltiSnips || true

    # gvim windows
    if [[ -d "${__dir_gvim_root}" ]]; then
        install_link -c "${__dir_dotfiles}/vimrc" "${__dir_gvim_home}/_gvimrc" || true
        install_link -c "${__dir_dotfiles}/vimrc.plugins" "${__dir_gvim_home}/.vimrc.plugins" || true
        install_link -c "${__dir_dotfiles}/vimrc.functions" "${__dir_gvim_home}/.vimrc.functions" || true

    fi
    # gnome-terminal
    if [[ -d ~/.gconf/apps/gnome-terminal ]]; then
        install_link "${__dir_dotfiles}/gnome-terminal" ~/.gconf/apps/gnome-terminal || true
    fi

    # Spacemacs
    if hash emacs 2>/dev/null; then
        install_link "${__dir_dotfiles_new}/spacemacs" "${HOME}/.spacemacs" || true
        install_link -n "${__dir_dotlocal}/emacs.local" "${HOME}/.spacemacs.local" || true

        # Win
        if [[ -d "${__dir_win_home}/.emacs.d" ]]; then
            # install_link -w "${__dir_dotfiles}/spacemacs" "${__dir_win_home}/.spacemacs" || true
            install_link -w "${__dir_dotfiles_new}/spacemacs" "${__dir_win_home}/.spacemacs" || true
            # install_link -w "${__dir_dotlocal}/emacs.local" "${__dir_win_home}/.spacemacs.local" || true
            install_link -n -w "${__dir_dotlocal}/emacs.local" "${__dir_win_home}/.spacemacs.local" || true
        fi
    fi

    # soffice if installed manually (for easy opening in ranger)
    if ! hash soffice 2>/dev/null; then
        soffice_file="/opt/libreoffice6.3/program/soffice"
        install_link -n "$soffice_file" "$HOME/.local/bin/soffice"
    fi

    # Emacs Linux:
    # if hash emacs 2>/dev/null; then
    #     install_link ${__dir_dotfiles}/emacs ~/.emacs || true
    #     install_link ${__dir_dotlocal}/emacs.local ~/.emacs.d/mine/.emacs.local || true
    # fi

    # Emacs Win:
    # if [[ -f ${__dir_win_home} ]]; then
    #     loguj -p -i -t "${ltype}" "Linking windows emacs links in ${__dir_win_home}"
    #     install_link -w ${__dir_dotfiles}/emacs ${__dir_win_home}/.emacs || true
    #     install_link -w ${__dir_dotlocal}/emacs.local ${__dir_win_home}/.emacs.d/mine/.emacs.local || true
    #     # evil-leader:
    #     install_link -w ~/.emacs.d/mine/evil-leader.el ${__dir_win_home}/.emacs.d/mine/evil-leader.el || true
    #     # key-chord:
    #     install_link -w ~/.emacs.d/mine/key-chord.el ${__dir_win_home}/.emacs.d/mine/key-chord.el || true
    #     # evil:
    #     install_link -w ~/.emacs.d/evil ${__dir_win_home}/.emacs.d/evil || true
    #     # org-mode:
    #     install_link -w ~/.emacs.d/org-mode ${__dir_win_home}/.emacs.d/org-mode || true
    # fi

    # if [[ -d ${__dir_dotlocal} ]]; then
    #     # install_link ${__dir_dotlocal} ~/.dotfiles.local || true
    #     # install_link ${__dir_dotlocal}/bashrc.local ~/.bashrc.local || true
    #     # install_link ${__dir_dotlocal}/vimrc.local ~/.vimrc.local || true
    #     # install_link ${__dir_dotlocal}/gitconfig.local ~/.gitconfig.local || true
    #     # install_link ${__dir_dotlocal}/emacs.local ~/.emacs.d/mine/.emacs.local || true
    #     # [[ -d "${__dir_win_home}" ]] && install_link -w ${__dir_dotlocal}/emacs.local ${__dir_win_home}/.emacs.d/mine/.emacs.local || true
    # else
    #     loguj -i -t "${ltype}" "Emacs: no local dir."
    # fi

    #Ranger:
    # if hash ranger 2>/dev/null; then
    #     sed -i 's/^set column_ratios 1,5,3$/set column_ratios 1,3,4' ~/.config/ranger/rc.conf
    # fi
    if hash ranger 2>/dev/null; then
        find ~/.config/ranger -type f -not -name 'bookmarks' -not -name 'history' -not -name 'tagged' -exec rm -rf {} \; || true
        ranger --copy-config=all

        # set different options
        local rcconf="${HOME}/.config/ranger/rc.conf"
        # sed -i 's/^set column_ratios 1,3,4$/set column_ratios 1,5,3/' "${rcconf}"
        sed -i 's/^set show_hidden false$/set show_hidden true/;' "${rcconf}"
        sed -i 's/^set preview_files true$/set preview_files false/' "${rcconf}"
        sed -i 's/^set preview_directories true$/set preview_directories false/' "${rcconf}"
        sed -i 's/^set preview_images false$/set preview_images true/' "${rcconf}"
        # sed -i 's/^set save_tabs_on_exit false$/set save_tabs_on_exit true/' "${rcconf}"

        local rifleconf="${HOME}/.config/ranger/rifle.conf"
        local rifleconf_tmp="${HOME}/.config/ranger/rifle.conf.tmp"
        # add vim line to handle archive files:
        sed -i 's/^# Define the editor for non-text files + pager as last action$/# TK: archives:\next tar\|gz\|bzip2\|xz\|tgz\|tbzip2\|txz\|zip\|rar = vim -- "$@"\n&/' "${rifleconf}"
        # Add sql extensions to $EDITOR:
        sed -i 's/^\!mime ^text, label editor, ext xml|json|csv|tex|py|pl|rb|js|sh|php = ${VISUAL:-$EDITOR} -- "$@"$/!mime \^text, label editor, ext xml|json|csv|tex|py|pl|pls|rb|js|sh|php|sql = ${VISUAL:-$EDITOR} -- "$@"/' "${rifleconf}"
        sed -i 's/^\!mime ^text, label pager,  ext xml|json|csv|tex|py|pl|rb|js|sh|php = "$PAGER" -- "$@"$/!mime ^text, label pager,  ext xml|json|csv|tex|py|pl|pls|rb|js|sh|php|sql = "$PAGER" -- "$@"/' "${rifleconf}"
        # add viewnior line for images:
        grep -q ' viewnior,' "${rifleconf}" || sed -i 's/^mime ^image\/svg, has inkscape, X, flag f = inkscape -- "$@"/mime ^image, has viewnior,  X, flag f = viewnior -- "$@"\n&/' "${rifleconf}"
        # add xreader line for pdf:
        grep -q ' xreader,' "${rifleconf}" || sed -i 's/^ext pdf, has qpdfview, X, flag f = qpdfview "$@"/&\next pdf, has xreader,  X, flag f = xreader -- "$@"/' "${rifleconf}"
        # add options to feh
        sed -i 's/mime ^image, has feh,       X, flag f = feh -- "$@"/mime ^image, has feh,       X, flag f = feh -. --auto-rotate -- "$@"/' "${rifleconf}"

        if [[ -d "${__dir_dotlocal}" ]]; then
            case ${__myos} in
                CYGWIN)
                    if [[ ${__myhost} = W ]]; then
                        cat ~/.config/ranger/rifle.conf "${__dir_dotlocal}/rifle.conf.w.cygwin" > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-W)"
                    elif [[ ${__myhost} = H ]]; then
                        cat ~/.config/ranger/rifle.conf "${__dir_dotlocal}/rifle.conf.h.cygwin" > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-H)"
                    else
                        cat ~/.config/ranger/rifle.conf "${__dir_dotfiles_new}/rifle.conf" > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (C-OTHER)"
                    fi
                    ;;
                LINUX)
                    if [[ ${__myhost} = H ]]; then
                        cat ~/.config/ranger/rifle.conf "${__dir_dotlocal}/rifle.conf.h.linux" > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (L-H)"
                    elif [[ ${__myhost} = W ]]; then
                        cat ~/.config/ranger/rifle.conf "${__dir_dotlocal}/rifle.conf.w.linux" > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (L-W)"
                    else
                        loguj -i -t "${ltype}" "Ranger - linux - unknown host Copying default file."
                        cat ~/.config/ranger/rifle.conf "${__dir_dotfiles_new}/rifle.conf" > ~/.config/ranger/rifletmp.conf
                        mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                        loguj -i -t "${ltype}" "CP: rifle.conf (L-OTHER)"
                    fi
                    ;;
                *)
                    cat ~/.config/ranger/rifle.conf "${__dir_dotfiles_new}/rifle.conf" > ~/.config/ranger/rifletmp.conf
                    mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
                    loguj -i -t "${ltype}" "CP: rifle.conf (OTHER-OTHER)"
                    ;;
            esac
        else
            cat ~/.config/ranger/rifle.conf "${__dir_dotfiles_new}/rifle.conf" > ~/.config/ranger/rifletmp.conf
            mv ~/.config/ranger/rifletmp.conf ~/.config/ranger/rifle.conf
            # loguj -i -t "${ltype}" "Ranger - no local dotfiles. Copying default file."
            loguj -i -t "${ltype}" "CP: rifle.conf (default - no local dotfiles)"
        fi
        # if [[ "${__myos}" == "LINUX" ]]; then
        [[ -e ~/.config/ranger/bookmarks ]] &&
            ${__sudo} chown "${__my_user}" ~/.config/ranger/bookmarks
        # fi
    else
        loguj -i -t "${ltype}" "Ranger not found. Not creating links."
    fi

    # weechat
    if ( hash weechat 2>/dev/null || [[ -d ~/.weechat ]] ) && [[ -d ${__dir_dotlocal} ]]; then
        if [[ -d ${__dir_dotlocal}/weechat ]]; then
           install_link "${__dir_dotlocal}/weechat/guile" ~/.weechat/guile || true
           install_link "${__dir_dotlocal}/weechat/javascript" ~/.weechat/javascript || true
           install_link "${__dir_dotlocal}/weechat/lua" ~/.weechat/lua || true
           install_link "${__dir_dotlocal}/weechat/perl" ~/.weechat/perl || true
           install_link "${__dir_dotlocal}/weechat/python" ~/.weechat/python || true
           install_link "${__dir_dotlocal}/weechat/ruby" ~/.weechat/ruby || true
           install_link "${__dir_dotlocal}/weechat/script" ~/.weechat/script || true
           install_link "${__dir_dotlocal}/weechat/tcl" ~/.weechat/tcl || true
           install_link "${__dir_dotlocal}/weechat/xfer" ~/.weechat/xfer || true
           install_link "${__dir_dotlocal}/weechat/alias.conf" ~/.weechat/alias.conf || true
           install_link "${__dir_dotlocal}/weechat/aspell.conf" ~/.weechat/aspell.conf || true
           install_link "${__dir_dotlocal}/weechat/buffers.conf" ~/.weechat/buffers.conf || true
           install_link "${__dir_dotlocal}/weechat/charset.conf" ~/.weechat/charset.conf || true
           install_link "${__dir_dotlocal}/weechat/exec.conf" ~/.weechat/exec.conf || true
           install_link "${__dir_dotlocal}/weechat/irc.conf" ~/.weechat/irc.conf || true
           install_link "${__dir_dotlocal}/weechat/iset.conf" ~/.weechat/iset.conf || true
           install_link "${__dir_dotlocal}/weechat/logger.conf" ~/.weechat/logger.conf || true
           install_link "${__dir_dotlocal}/weechat/plugins.conf" ~/.weechat/plugins.conf || true
           install_link "${__dir_dotlocal}/weechat/relay.conf" ~/.weechat/relay.conf || true
           install_link "${__dir_dotlocal}/weechat/script.conf" ~/.weechat/script.conf || true
           install_link "${__dir_dotlocal}/weechat/sec.conf" ~/.weechat/sec.conf || true
           install_link "${__dir_dotlocal}/weechat/trigger.conf" ~/.weechat/trigger.conf || true
           install_link "${__dir_dotlocal}/weechat/weechat.conf" ~/.weechat/weechat.conf || true
           install_link "${__dir_dotlocal}/weechat/xfer.conf" ~/.weechat/xfer.conf || true

        else
            loguj -i -t "${ltype}" "No weechat local dotfiles."
        fi
    fi

    # vlc
    # if [[ -f "${__dir_dotlocal}/vlcrc" && -d "${HOME}/.config/vlc" ]]; then
    #     install_link "${__dir_dotlocal}/vlcrc" "${HOME}/.config/vlc/vlcrc"
    # fi

    # different
    install_link "${__dir_dotfiles_new}/vimperatorrc" ~/.vimperatorrc || true
    [[ -d "${__dir_win_profile}" ]] && install_link -w "${__dir_dotfiles}/vimperatorrc" "${__dir_win_profile}/_vimperatorrc" || true


    # links in $HOME/Kossak/links
    links_dir="$HOME/Kossak/links"
    mkdir -p "$links_dir"
    # poetry venv:
    dir="$HOME/.cache/pypoetry/virtualenvs"
    [[ -d "$dir" ]] && install_link "$dir" "$links_dir/poetry_venv"
    # pipx venv:
    dir="$HOME/.local/pipx/venvs"
    [[ -d "$dir" ]] && install_link "$dir" "$links_dir/pipx_venv"

    # Desktop shortcuts
    mkdir -p "$links_dir/desktop_shortcuts"
    dir="/usr/share/applications"
    [[ -d "$dir" ]] && install_link "$dir" "$links_dir/desktop_shortcuts/usr_share_applications"
    dir="$HOME/.local/share/applications"
    [[ -d "$dir" ]] && install_link "$dir" "$links_dir/desktop_shortcuts/home_local_share_applications"

    # steam common (main disk -SSD):
    steam_first_disk="$HOME/.local/share/Steam"
    steam_secon_disk="/mnt/data_lin/steam_games"

    dir="steamapps/common"
    [[ -d "$steam_first_disk/$dir" ]] && install_link "$steam_first_disk/$dir" "$links_dir/steam_common_main"
    [[ -d "$steam_secon_disk/$dir" ]] && install_link "$steam_secon_disk/$dir" "$links_dir/steam_common_second"

    dir="steamapps/compatdata"
    [[ -d "$steam_first_disk/$dir" ]] && install_link "$steam_first_disk/$dir" "$links_dir/steam_compatdata_main"
    [[ -d "$steam_secon_disk/$dir" ]] && install_link "$steam_secon_disk/$dir" "$links_dir/steam_compatdata_second"

    dir="steamapps/compatdata/275850"
    [[ -d "$steam_first_disk/$dir" ]] && install_link "$steam_first_disk/$dir" "$steam_first_disk/${dir}_No_Mans_Sky"
    [[ -d "$steam_secon_disk/$dir" ]] && install_link "$steam_secon_disk/$dir" "$steam_secon_disk/${dir}_No_Mans_Sky"

    # pipenv venv:
    dir="$HOME/.local/share/virtualenvs"
    [[ -d "$dir" ]] && install_link "$dir" "$links_dir/pipenv_venv"
    # pipsi venv:
    dir="$HOME/.local/venvs"
    [[ -d "$dir" ]] && install_link "$dir" "$links_dir/pipsi_venv"
    # .visidatarc
    install_link "${__dir_dotfiles_new}/visidatarc" ~/.visidatarc || true

    # systemd
    dir="$HOME/.local/venvs"
    dst_dir="$links_dir/systemd"
    rm $dst_dir/*
    mkdir -p $dst_dir
    # [[ -d "$dir" ]] && install_link "$dir" "$links_dir/pipsi_venv"
    for src in \
        /etc/systemd/system \
        /etc/systemd/system.control \
        /etc/systemd/user \
        /run/systemd/generator \
        /run/systemd/generator.early \
        /run/systemd/generator.late \
        /run/systemd/system \
        /run/systemd/system.control \
        /run/systemd/transient \
        /run/systemd/user \
        /usr/lib/systemd/system \
        /usr/lib/systemd/user \
        /usr/local/lib/systemd/system \
        /usr/local/lib/systemd/user
    do
        dst_name=${src#/}
        dst_name=${dst_name//\//_}
        # $src exists has files in it:
        if [[ -d "$src" ]] && [[ "$(ls -A $src )" ]]; then
            install_link "$src" "$dst_dir/$dst_name"
        fi
    done

    # links from .local
    [[ -r "${__dir_dotlocal}/install.links.local" ]] && source "${__dir_dotlocal}/install.links.local"

    loguj -se -t "${ltype}" "DOTFILES"
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

testing()
{
    echo "=== TESTING START =================================================="


    echo "=== TESTING END ===================================================="
    return 0
}


# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

install_link "${__dir_dotfiles}" ~/.dotfiles
echo "=== END OF INITIAL CMDS ==========================================="

[[ ${__if_testing} == "Y" ]] && testing
[[ ${__if_dotfiles} == "Y" ]] && install_dotfiles
[[ ${__if_break_links} == "Y" ]] && break_links

# display_log_info
display_log_error

# cd "${__dir_dotfiles}"
# git st
# git remote show origin

loguj -se -t "===" "END OF SCRIPT"

exit

