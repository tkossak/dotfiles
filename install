#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
# __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
# __base="$(basename ${__file} .sh)"
# __root="$(cd "$(dirname "${__dir}")" && pwd)"

# magic variables for links
__file="$(readlink -f ${BASH_SOURCE[0]})"
__dir="$(cd "$(dirname "${__file}")" && pwd)"

# arg1="${1:-}"

# create_link
# $1 = if -w then create windows link
#    = if -c then cp instead of creating link
#    = otherwise create linux link
#    = can be EMPTY
# $1 = source file
# $2 = destination = link path/link

create_link()
{
    local parse_params="Y"
    local link_type="LINUX"
    local if_backup="Y"
    while [[ ${parse_params} = "Y" ]]; do
        case $1 in
            -w) link_type="WIN HARD"
                shift
                ;;
            -c) link_type="CP"
                shift
                ;;
            -n) if_backup="N"
                shift
                ;;
            *) parse_params="N"
                ;;
        esac
    done

    local src_file="${1:?\$1 not set}"
    local dst_file="${2:?\$2 not set}"
    src_file="$(readlink -f ${src_file})"

    # dst_file="$(readlink -f ${dst_file})"

    # check if src exists:
    if [[ ! -e "${src_file}" ]]; then
        echo "Error: File ${src_file} does not exists."
        return 1
    fi
    # remove dst if it's a link
    if [[ -L "${dst_file}" ]]; then
        rm "${dst_file}"
    fi

    # echo "${src_file}"
    # echo "${dst_file}"

    # backup dst
    if [[ -f ${dst_file} && ! -L ${dst_file} ]]; then
        if [[ ${if_backup} = "Y" ]]; then
            echo "===Backup ${dst_file}.old"
            mv "${dst_file}" "${dst_file}.old"
        else
            rm -rf "${dst_file}"
        fi
    fi

    # create link
    if [[ $link_type = "WIN HARD" ]]; then
        echo "===LINK Windows ---${dst_file}--- to ---${src_file}---... "
        if [[ -d ${dst_file} ]]; then
            cmd /c mklink /J "$(cygpath -aw ${dst_file})" "$(cygpath -aw ${src_file})"
        else
            cmd /c mklink /H "$(cygpath -aw ${dst_file})" "$(cygpath -aw ${src_file})"
        fi
    elif [[ $link_type = "CP" ]]; then
        echo -n "===COPY ${dst_file} ---to--- ${src_file} ---... "
        cp "${src_file}" "${dst_file}"
    elif [[ $link_type = "LINUX" ]]; then
        echo -n "===LINK Linux ${dst_file} ---to--- ${src_file} ---... "
        ln -s "${src_file}" "${dst_file}"
    else
        echo "===ERROR: bledny link_type: ${link_type}"
    fi &&
    {
        echo "Done."
    } ||
    {
        echo $'\n'"===ERROR!================================"
    }

}

# -------------------------------------------------------

__myos="$(uname)"
__myhost="$(uname -n)"
__dir_dlocal="$(cd "$(dirname "${__dir}")" && pwd)/dotfiles.local"
__dir_dlocal="$(readlink -f ${__dir_dlocal})"
hash cygpath 2>/dev/null && __win_appdata="$(cygpath -au ${APPDATA:-})" || __win_appdata=""

#Initial cmds:
mkdir -p ~/.emacs.d/mine
[[ -d ${__win_appdata} ]] && mkdir -p ${__win_appdata}/.emacs.d/mine
find ${__dir}/bin -type f -not -name 'create_bash.model' -exec chmod +x {} \;

# Basic Links:
create_link ${__dir} ~/.dotfiles
create_link ${__dir}/vimrc ~/.vimrc
create_link ${__dir}/tmux.conf ~/.tmux.conf
create_link ${__dir}/bashrc ~/.bashrc
create_link ${__dir}/gitconfig ~/.gitconfig

# Emacs Linux + Win:
create_link ${__dir}/emacs ~/.emacs
[[ -d ${__win_appdata} ]] &&
    create_link -w -n ${__dir}/emacs ${__win_appdata}/.emacs
[[ ! -f ~/.emacs.d/mine/key-chord.el ]] &&
    curl -o ~/.emacs.d/mine/key-chord.el http://www.emacswiki.org/emacs/download/key-chord.el
[[ -d ${__win_appdata} ]] &&
    create_link -w -n ~/.emacs.d/mine/key-chord.el ${__win_appdata}/.emacs.d/mine/key-chord.el

# local files:
if [[ -d ${__dir_dlocal} ]]; then
    create_link ${__dir_dlocal} ~/.dotfiles.local
    create_link ${__dir_dlocal}/bashrc.local ~/.bashrc.local
    create_link ${__dir_dlocal}/vimrc.local ~/.vimrc.local
    create_link ${__dir_dlocal}/gitconfig.local ~/.gitconfig.local
    create_link ${__dir_dlocal}/emacs.local ~/.emacs.d/mine/.emacs.local
    [[ -d ${__win_appdata} ]] && create_link -w -n ${__dir_dlocal}/emacs.local ${__win_appdata}/.emacs.d/mine/.emacs.local
else
    echo "===Error: local dir does not exist=${__dir_dlocal}"
    # __dir_dlocal=""
fi

#Ranger:
if [[ -d ~/.config/ranger ]]; then
    create_link ${__dir}/rc.conf ~/.config/ranger/rc.conf
    # create_link ${__dir}/rifle.conf ~/.config/ranger/rifle.conf
    if [[ -d "${__dir_dlocal}" ]]; then
        case ${__myos} in
            CYGWIN*)
                if [[ ${__myhost} = AWA* ]]; then
                    create_link ~/.dotfiles.local/rifle.conf.work.cygwin ~/.config/ranger/rifle.conf
                elif [[ ${__myhost} = HEAVEN ]]; then
                    create_link ~/.dotfiles.local/rifle.conf.home.cygwin ~/.config/ranger/rifle.conf
                fi
                ;;
            Linux)
                if [[ ${__myhost} = HEAVEN ]]; then
                    create_link ~/.dotfiles.local/rifle.conf.home.linux ~/.config/ranger/rifle.conf
                fi
                ;;
            *)
                echo "Error: Unknown host."
                ;;
        esac
    fi
else
    echo "===Ranger folder not found. Not creating links."
fi

vim +PluginInstall +PluginClean +qall

echo "===Links done."

