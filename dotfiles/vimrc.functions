" ==================================================================
" Simple note
" ==================================================================
command! Sn call Sn()
function! Sn()
  set shellcmdflag=-ic
  let g:SimplenoteUsername = system("get_param simplenote_user")
  let g:SimplenotePassword = system("get_param simplenote_pass")
endfunction

" ==================================================================
" Maximize Toggle
" ==================================================================
function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" ==================================================================
" Sedify - remove sed special chars, so the file can be used as search string in sed scripts
" ==================================================================
command! Sedify call Sedify()
function! Sedify()
    %s/\\/\\\\/gi
    %s/\//\\\//gi
    %s/\$/\\\$/gi
    %s/\./\\\./gi
    %s/\*/\\\*/gi
    %s/\[/\\\[/gi
    %s/\]/\\\]/gi
    %s/\^/\\\^/gi
endfunction

" ==================================================================
" Collify - remove polish chars and -_
" ==================================================================
command! Collify call Collify()
function! Collify()
    %s/ę/e/gie
    %s/ó/o/gie
    %s/ą/a/gie
    %s/ś/s/gie
    %s/ł/l/gie
    %s/ż/z/gie
    %s/ź/z/gie
    %s/ć/c/gie
    %s/ń/n/gie
    %s/Ę/E/gie
    %s/Ó/O/gie
    %s/Ą/A/gie
    %s/Ś/S/gie
    %s/Ł/L/gie
    %s/Ż/Z/gie
    %s/Ź/Z/gie
    %s/Ć/C/gie
    %s/Ń/N/gie
    %s/-/_/gie
    %s/ /_/gie
endfunction
" ==================================================================
" TidyJavaScript
" ==================================================================
" Simple re-format for minified Javascript

command! TidyJavaScript call TidyJavaScript()
function! TidyJavaScript()
    %s/{\ze[^\r\n]/{\r/g
    %s/){/) {/g
    %s/};\?\ze[^\r\n]/\0\r/g
    %s/;\ze[^\r\n]/;\r/g
    %s/[^\s]\zs[=&|]\+\ze[^\s]/ \0 /g
    normal ggVG=
endfunction

" ==================================================================
" DiffSaved
" ==================================================================
" Diff current buffer (before saving) with it's version on disk

com! DiffSaved call DiffSaved()
function! DiffSaved()
  bufdo diffoff
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
  " normal \<C-w>w
  execute "normal \<C-w>w"
endfunction

" ==================================================================
" Scriptnames
" ==================================================================
" [cmd] Scriptnames - list :scriptnames in the buffer:
" Execute 'cmd' while redirecting output.
" Delete all lines that do not match regex 'filter' (if not empty).
" Delete any blank lines.
" Delete '<whitespace><number>:<whitespace>' from start of each line.
" Display result in a scratch buffer.

function! s:Filter_lines(cmd, filter)
  let save_more = &more
  set nomore
  redir => lines
  silent execute a:cmd
  redir END
  let &more = save_more
  new
  setlocal buftype=nofile bufhidden=hide noswapfile
  put =lines
  g/^\s*$/d
  %s/^\s*\d\+:\s*//e
  if !empty(a:filter)
    execute 'v/' . a:filter . '/d'
  endif
  0
endfunction
command! -nargs=? Scriptnames call s:Filter_lines('scriptnames', <q-args>)
