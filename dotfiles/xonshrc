# XONSH WEBCONFIG START
$PROMPT = '{env_name}{BOLD_GREEN}{user}@{hostname}{BOLD_BLUE} {cwd}{branch_color}{curr_branch: {}}{RESET} {RED}{last_return_code_if_nonzero:[{BOLD_INTENSE_RED}{}{RED}] }{RESET}{BOLD_BLUE}{prompt_end}{RESET} '
# XONSH WEBCONFIG END
# $PROMPT = '{env_name}{BOLD_GREEN}{user}@{hostname}{BOLD_BLUE} {cwd}{branch_color}{curr_branch: {}}{RESET} {BOLD_BLUE}{prompt_end}{RESET} '

# $SHELL_TYPE = 'readline'
# $XONSH_SHOW_TRACEBACK = True
# $XONSH_TRACEBACK_LOGFILE = '/tmp/xonsh_traceback_logfile'

# xontrib load abbrevs argcomplete broot coreutils fzf-widgets prompt_ret_code whole_word_jumping z vox # autovox avox_poetry
xontrib load abbrevs argcomplete broot coreutils fzf-widgets vox # whole_word_jumping autovox avox_poetry

# so poetry doesn't throw error: Failed to unlock the collection!
# while running eg:
#   poetry install
#   poetry add click
$PYTHON_KEYRING_BACKEND = "keyring.backends.fail.Keyring"

$EDITOR='vim'
$BROWSER='firefox'
# $RIGHT_PROMPT = '{#A0FF4C}{localtime}'
$RIGHT_PROMPT = '{BOLD_GREEN}{localtime}'
# $BOTTOM_TOOLBAR = '{BOLD_#A0FF4C}{user}{NO_COLOR} on {BOLD_#D6A6FF}{cwd}'
$MULTILINE_PROMPT = ''

# Aliases and abbrevs ##############################################################
def ga(text):
    """Get abbrev that gets expanded only on the begining of line
    (Not counting spaces)
    """
    return lambda buffer, word: text if buffer.text.strip() == word else word

abbrevs['yay'] = ga('asdf_disable; yay')
# abbrevs['teams.'] = 'teams --disable-seccomp-filter-sandbox'
abbrevs['convertpng'] = ga('mogrify -format jpg -quality 80 *.png')

# aliases['kittyt'] = 'kitty --config /home/kossak/.dotfiles/dotfiles/kitty_for_tmux.conf all>/dev/null &; disown 1'

aliases['l'] = 'exa -l --git'
abbrevs['df'] = ga('df -h')
abbrevs['ta'] = ga('tmux attach-session')
abbrevs['tl'] = ga('tmux list-sessions')
abbrevs['tn'] = ga('tmux new-session')
abbrevs['rg'] = ga('rg -i')
aliases['vim_tns'] = 'vim $ORACLE_HOME/network/admin/tnsnames.ora'
abbrevs['pss'] = ga('ps -ef | grep -i')
abbrevs['free'] = ga('free -m')
# aliases['tarb'] = 'tar -cavf DIR_(date +'%Y%m%d_%H%M%S').tar.gz DIR'
abbrevs['ntp'] = ga('sudo ntpdate pl.pool.ntp.org')
aliases['monitor_off'] = 'xset dpms force off'

abbrevs['mtro'] = ga('mtr -o "LRD N ABWV"')
abbrevs['mtrg'] = ga('mtr -o "LRD N ABWV" 8.8.8.8')  # google
abbrevs['smbm'] = ga('sudo mount -t cifs -o credentials=/mnt/params/smb_cred_ja,uid=kossak,gid=kossak,vers=2.0 //SERVER/DIR /mnt/smb1')
abbrevs['smbl'] = ga('smbclient -A /mnt/params/smb_cred_ja -L //')
abbrevs['smbi'] = ga('smbclient //192.168.1.1/folder -A /mnt/params/smb_cred_ja')
abbrevs['mountvb'] = ga('sudo mount -t vboxsf -o uid=kossak,gid=kossak vbox_shared /mnt/vs')
# aliases['reds'] = 'redshift -l 50.2648920:19.0237820 -t 3300:3300 &'
abbrevs['rsyncc'] = ga('rsync -vr --progress AAA BBB/')

abbrevs['envb'] = ga('env | grep -Ei "display|xauth|gpg|^ssh|^op_session|^bw_session|^cloudsdk_active"')
abbrevs['lsblkl'] = ga('sudo lsblk -fo "name,size,type,fstype,label,mountpoint,uuid"')

# media
abbrevs['dmp3']  = ga("yt-dlp -cx --audio-format mp3 -o '%(title)s.%(ext)s' (xclip -o)")
abbrevs['y']     = ga('yt-dlp $(xclip -o -sel c)')
abbrevs['dtel']  = ga('yt-dlp -f "worstvideo[height>=480]+bestaudio[abr<=128]" -o ''%(title)s.%(ext)s'' (xclip -o)')
abbrevs['dtel2'] = ga("yt-dlp -f 'bestvideo[ext=mp4][height=720]+bestaudio[ext=m4a][abr=128]/bestvideo[height<=720]+bestaudio[abr<=128]' -o '%(title)s.%(ext)s' $(xclip -o)")
abbrevs['ffmpegct'] = ga('ffmpeg -i -c:v libx264 -c:a aac -pix_fmt yuv420p')
abbrevs['goc'] = ga('go-chromecast --first')

# różne
abbrevs['sd'] = ga('sudo docker')
abbrevs['di'] = ga('docker images')
abbrevs['dp'] = ga('docker ps')
abbrevs['dr'] = ga('docker container run -it --rm <NAME> /bin/bash')
abbrevs['dre'] = ga('docker container run -it --rm --entrypoint /bin/bash <>')
abbrevs['de'] = ga('docker exec -it <NAME> bash')

# vars for SSH/TMUX
abbrevs['envss'] = ga('''\
$DISPLAY = ':50.0'
$XAUTHORITY = '/home/kossak/.Xauthority'
tmux setenv DISPLAY $DISPLAY
tmux setenv XAUTHORITY $XAUTHORITY
$SSH_AUTH_SOCK = '/run/user/1000/keyring/ssh'
tmux setenv SSH_AUTH_SOCK $SSH_AUTH_SOCK''')

abbrevs['envss50'] = ga('''\
$DISPLAY = ':50.0'
$XAUTHORITY = '/home/kossak/.Xauthority'
tmux setenv DISPLAY $DISPLAY
tmux setenv XAUTHORITY $XAUTHORITY
$SSH_AUTH_SOCK = '/run/user/1000/keyring/ssh'
tmux setenv SSH_AUTH_SOCK $SSH_AUTH_SOCK''')

abbrevs['envss51'] = ga('''\
$DISPLAY = ':51.0'
$XAUTHORITY = '/home/kossak/.Xauthority'
tmux setenv DISPLAY $DISPLAY
tmux setenv XAUTHORITY $XAUTHORITY
$SSH_AUTH_SOCK = '/run/user/1000/keyring/ssh'
tmux setenv SSH_AUTH_SOCK $SSH_AUTH_SOCK''')

# python
abbrevs['va'] = ga('vox activate')
abbrevs['vde'] = ga('vox deactivate')
abbrevs['pypiserver'] = ga('pypi-server run -p 8080 -i 127.0.0.1 --hash-algo=sha256 ~/Kossak/pypi_packages')
abbrevs['voxap'] = ga('vox activate /home/kossak/Kossak/links/poetry_venv/')
abbrevs['voxa'] = ga('vox activate')
abbrevs['voxd'] = ga('vox deactivate')
abbrevs['voxn'] = ga('vox new -p /home/kossak/.asdf/installs/python/')

abbrevs['asdfi']  = ga('env PYTHON_CONFIGURE_OPTS="--enable-shared --enable-optimizations" asdf install python')
abbrevs['asdfs']  = ga("$ASDF_PYTHON_VERSION =")
abbrevs['asdfl']  = ga('asdf list-all python')
abbrevs['asdfu']  = ga('asdf update')
abbrevs['asdfup'] = ga('asdf plugin-update python')
abbrevs['poa']    = ga("poetry add")
abbrevs['poav']   = ga("poetry add PKG=1.14.5")
abbrevs['pipi']   = ga('pip install -U')
abbrevs['pipil']  = ga('pip install --extra-index-url http://localhost:8080 -U')
abbrevs['pipxi']  = ga('pipx install')
abbrevs['pipxil'] = ga('pipx install --index-url http://localhost:8080')
abbrevs['pipxu']  = ga('pipx upgrade')
abbrevs['pipxul'] = ga('pipx upgrade --index-url http://localhost:8080')
abbrevs['pipxu']  = ga('pipx upgrade')
abbrevs['pipxup'] = ga('pipx upgrade --index-url http://localhost:8080 --pip-args="--pre"')
# abbrevs['pipd']   = ga('pip download')
# abbrevs['ipdbb']  = ga('export PYTHONBREAKPOINT=ipdb.set_trace')

# gcp
abbrevs['bqh'] = ga('bq head --format csv tk_tmp.LOAD_ERRORS | vd -f csv')
abbrevs['gc'] = ga("$CLOUDSDK_ACTIVE_CONFIG_NAME='")
abbrevs['gcl'] = ga("gcloud config list")
abbrevs['gcca'] = ga("gcloud config configurations activate")
abbrevs['gccl'] = ga("gcloud config configurations list")
abbrevs['gal'] = ga("gcloud auth list")
abbrevs['gar'] = ga("gcloud auth revoke")
abbrevs['gpl'] = ga("gcloud projects list")
abbrevs['gmil'] = ga("gcloud compute instances list")
abbrevs['gmid'] = ga("gcloud compute instances delete")
abbrevs['gmdl'] = ga("gcloud compute disks list")
abbrevs['gms'] = ga("gcloud compute ssh")

# różne
abbrevs['mountiso'] = ga('sudo mount -o loop myisofile.iso /mnt/a')
abbrevs['bwu'] = ga("$BW_SESSION=$(bw unlock --raw)")
abbrevs['bws'] = ga("bw status")
abbrevs['passs'] = ga(r"pass show $(find -L ~/.password-store -iname '*.gpg' | sed -e 's_^/home/kossak/.password-store/__' -e 's_.gpg$__' | fzf | tr -d '\n')")
abbrevs['passc'] = ga(r"pass -c $(find -L ~/.password-store -iname '*.gpg' | sed -e 's_^/home/kossak/.password-store/__' -e 's_.gpg$__' | fzf | tr -d '\n')")
abbrevs['passe'] = ga(r"pass edit $(find -L ~/.password-store -iname '*.gpg' | sed -e 's_^/home/kossak/.password-store/__' -e 's_.gpg$__' | fzf | tr -d '\n')")
abbrevs['borglf'] = ga('borg list --format \'{name}{NL}\' . | fzf')
abbrevs['borgllf'] = ga('borg list f".::{$(borg list --format \'{name}{NL}\' . | fzf).strip()}" | less')
abbrevs['borgmf'] = ga('borg mount f".::{$(borg list --format \'{name}{NL}\' . | fzf).strip()}" /mnt/borg')

def _ranger_cd():
    f = p'/tmp/rangerdir'
    # ranger --choosedir @(f) @(f.cwd())
    ranger --choosedir @(f)
    if f.exists():
        cd @(f.read_text())
aliases['ranger_cd'] = _ranger_cd
aliases['r'] = _ranger_cd

# # KEYBINDINGS
# from prompt_toolkit.keys import Keys
# from prompt_toolkit.filters import Condition, EmacsInsertMode, ViInsertMode
#
# @events.on_ptk_create
# def custom_keybindings(bindings, **kw):
#
#     # @bindings.add(Keys.ControlW)
#     # def say_hi(event):
#         # event.current_buffer.insert_text('hi')
#
#     @bindings.add(Keys.ControlO)
#     def ranger_cd_key(event):
#         _ranger_cd()
#         # TODO: put cursor at the end of last prompt?
#         # event.cli.renderer.erase()

# Update different paths:
# from pathlib import Path

# # LD_LIBRARY_PATH
# ld_paths = [
#     p'/usr/lib',
# ]
# paths = [p for p in ld_paths if p.exists()]
# ${...}['LD_LIBRARY_PATH'] = ${...}.get('LD_LIBRARY_PATH', [])
# $LD_LIBRARY_PATH = [p for p in $LD_LIBRARY_PATH if Path(p) not in paths] + paths

# PATHs
paths = [
    p'~/.asdf/shims',
    p'~/.asdf/bin',
    p'~/.local/bin',
    p'/snap/bin',
    p'~/.dotfiles.local/bin',
    p'~/.dotfiles/bin',
    p'/home/linuxbrew/.linuxbrew/bin',
    p'~/apps/google-cloud-sdk/bin',
    p'/opt/google-cloud-sdk/bin',
    p'~/.poetry/bin/',
    p'/opt/cisco/anyconnect/bin',
    p'/opt/oracle/instantclient_19_9',
    p'~/apps/oracle_instantclient',
]
paths = [str(p) for p in paths if p.exists()]
$PATH = paths + [p for p in $PATH if p not in paths]

del paths

# fzf
$fzf_history_binding = "c-r"
$fzf_ssh_binding = "c-s"
$fzf_file_binding = "c-t"
$fzf_dir_binding = "c-g"

$fzf_find_command = "fd"
$fzf_find_dirs_command = "fd -t d"
